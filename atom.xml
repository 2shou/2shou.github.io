<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>建造者说</title>
  
  <subtitle>总在造着什么的路上</subtitle>
  <link href="http://guoze.me/atom.xml" rel="self"/>
  
  <link href="http://guoze.me/"/>
  <updated>2020-01-04T08:45:06.000Z</updated>
  <id>http://guoze.me/</id>
  
  <author>
    <name>2shou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>站在19年的尾巴，谈谈目标管理</title>
    <link href="http://guoze.me/target-management.html"/>
    <id>http://guoze.me/target-management.html</id>
    <published>2020-01-04T08:37:34.000Z</published>
    <updated>2020-01-04T08:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>忘记写过或者看过多少篇的年终总结，是以「时间飞逝」四个字作为开头的，心里打的小九九无非想以这四个字作为碌碌无为的借口。每一年的年初，我都会给自己画一个饼，订下今年我希望完成的大小目标，到了年底，我会把年初画的饼再翻出来，挨个检查完成的进度，固然有许多事项超出了之前的预期，也有许多事项经过了时间变得没那么重要了，然而让人懊悔的是，其中一个大目标没有完成，甚至可以说是毫无进展。</p><p>那么，我该为这一年打几分？基本可以打零分。好比有这么一位工程师，活出得又快又好，小目标都超出预期，最重要的项目却没有推进好，作为上级该给他打几分？相信也高不到哪里去。</p><span id="more"></span><p>无论是学习还是工作，我们总是艳羡那些时间管理做得特别出色的同伴，这些人可以轻易开十几条线程接客还不凌乱，更别说旺盛过人的精力，<code>996.icu</code>以外腾出的碎片时间，还能到夜店兼职当个DJ什么的，第二人生的精彩程度足以写本小说了。</p><p>但是，我想说的是，目标管理比时间管理重要多了。对于大多数人，最大的挑战其实不在于井井有条的管理好自己的时间，而在于看似蠢笨的坚持做最重要的事情，那些与最重要目标不相关的反馈，不妨都厚着脸皮保持钝感力，正反馈也好，负反馈也好，都当成小楼一夜听春雨。</p><p>最近在读战国史，总在思考为什么是看似条件最差的秦国最终统一了天下？除了地理位置的优势之外，秦国的优势就在于专注，把道德、文化、商业放在一边，专注于耕与战。几代人都毫不摇摆，前方多打胜仗，后方多产粮食，吞并掉在合纵与连横之间举棋不定的六国。</p><p>今年之内被许多面临选择的小朋友咨询过，该工作还是读研？该跳槽还是留守？该做后台还是转机器学习？其实没有太多非A不可或非B不可的选择，关键是，选好了之后拔腿飞奔，在两条赛道之间犹犹豫豫的人，注定不会成功。</p><p>骗人的都是大实话。其中一句声名远扬的叫做<em>选择大于努力</em>。选择当然大于努力，然而要做好大的选择，得到十倍乃至百倍的收益，要么有超凡的眼界、要么有板上钉钉的实力、要么有瞎蒙瞎对的好运气。除了运气之外，其他的元素都得靠一条道走到黑的深耕来获取。99%想做好选择的人，都到不了让选择来决定其命运的程度。</p><p>比如写「浪潮之巅」的吴军博士，就是一位目标管理十分出色的人。无论处于什么位置之上，他始终把写出不朽的著作作为最重要的目标，谈到为什么离开待遇优厚蒸蒸向上的谷歌，答案也非常简单，因为想要更多时间写书，在金钱与时间之间，他跳出了思维定势，选择了时间而非金钱，紧紧抓住了对自己最不可放弃的目标。</p><p>好友W曾从一个通往财务自由的岗位离开，去学校念了个心理学的博士，我问他那几年最大的收获，他回答是想清楚了一个道理：人内心的矛盾来自于追求和现实是否一致，两者的一致程度越高，获得幸福的概率也越高。翻译成大白话，就是要趁早想清楚自己要什么，名也好，利也好，终究不是所有人的终极答案。</p><p>想清楚了，紧紧抓住，至死不悔。就是幸福的诀窍。</p><p>最后，推荐一个与本文相关的视频，值得一看再看。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://v.qq.com/txp/iframe/player.html?vid=v03604lrvan" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;忘记写过或者看过多少篇的年终总结，是以「时间飞逝」四个字作为开头的，心里打的小九九无非想以这四个字作为碌碌无为的借口。每一年的年初，我都会给自己画一个饼，订下今年我希望完成的大小目标，到了年底，我会把年初画的饼再翻出来，挨个检查完成的进度，固然有许多事项超出了之前的预期，也有许多事项经过了时间变得没那么重要了，然而让人懊悔的是，其中一个大目标没有完成，甚至可以说是毫无进展。&lt;/p&gt;
&lt;p&gt;那么，我该为这一年打几分？基本可以打零分。好比有这么一位工程师，活出得又快又好，小目标都超出预期，最重要的项目却没有推进好，作为上级该给他打几分？相信也高不到哪里去。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>如何治愈一流人才综合症</title>
    <link href="http://guoze.me/how-to-save-best-talent.html"/>
    <id>http://guoze.me/how-to-save-best-talent.html</id>
    <published>2019-12-08T14:27:45.000Z</published>
    <updated>2019-12-08T14:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>朋友L算是朋友圈中集合聪明与勤奋于一身的佼佼者，本科毕业顺利保了专业排名第一学校的研究生，毕业后又直接去了某个技术出身创始人的大厂，一路职级顺风顺水到了技术专家，又兼任一支核心团队的Leader，我常戏称L简直是活在职场童话中的白马王子。北京初雪之前，匆匆在机场与L见了一面，第一感觉竟然是「老气横秋」，短短半个小时的交谈，充斥着负能量的抱怨。我一边忙不迭安慰，一边惊讶于白马王子和白雪公主的「婚姻」也会出问题：</p><ul><li>换了个新总监，产品导向明显，技术Leader话语权变弱，技术导向的项目由产品经理来负责，显然不合理</li><li>新总监对技术和业务都不熟悉，纯粹是外行指导内行，自己规划的技术路线频频受到干扰</li><li>公司部门调整，原来的核心项目被划走，手头只剩下边缘业务，哪怕出了业绩老板也不会关注</li><li>升任Leader之后沟通相关的琐事变多，而组内新人技术能力与悟性不如L，带起来很头疼</li><li>……</li></ul><p>虽然每一项吐槽都可以单独拎出来若干针对性的给出建议，但是飞机上想得更多的是，什么样的认知有助于L找到一个更好的工作状态？</p><span id="more"></span><p>于是我又回忆起刚工作那几年，虽然技术和业务成长飞快，但我也是喜欢怼天怼地怼空气，上司、同事、环境在我的眼里都是一堆问题。我总结这叫一流人才综合症，把本应对内的苛刻错误延伸到了对外，在花了很长时间复盘、反思和实践之后，才逐渐治愈了这种怪病。如果是L前几年一般众星捧月的顺境，一流人才综合症对于成事那自然是有利无弊，放大的自信有助于去推动能力边界以外的任务。然而，平凡人的顺境能有十之一二就不错了，遇到了十之八九的逆境，一流人才综合症就是成长路上最大的绊脚石。</p><p>遇到逆境，职场厚黑学多半会教导你要么狠要么忍要么滚。其实最好的方法是学会和逆境相处，并始终以积极的心态去想：</p><ul><li>当前还有哪些有利因素没有利用到？</li><li>如何建立起与上司及同事的信任关系？</li><li>如何发挥每个队友的优点，把合适的人摆放到合适的位置？</li><li>如果上司「外行」，该怎么创造最大的空间给自己做事？</li><li>做的项目不是核心项目，该怎么争取资源并建立自己的影响力？</li></ul><p>逆境中要活得痛快，就要学着把所有的「危」，转个180度，当成「机」。</p><p>反过来想，假若L遇到了顺风顺水的外部条件，上司懂行、技术导向、项目核心，是否就一定称心如意呢？</p><p>其实也未必。懂行的上司往往管得比较细，就意味着可参与的决策空间变小。技术导向看起来比较美，但另一方面说明项目的落地风险比较大。至于项目核心与否，某大厂的老江湖产品经理R就曾告诫过我，尽量别对聚光灯下的项目抱太高预期，因为核心项目利益复杂，被干涉的可能性大，资源多了限制更多，反而最终能成的概率要比远离中心慢慢打磨的项目要小。</p><p>最后，不妨平心静气问自己一个问题：<strong>一个人的价值高低，是否真的与其处在顺境逆境有关呢？</strong></p><p>我的答案是既有关又无关。诚然坐上了火箭窜升的人，能获得比自身价值更高的溢价，但是职业价值的高低长期下来只会回归到一个因素，就是个人的眼界、认知与能力。这三点与你是否处在舞台的中央，被聚光灯笼罩还是掩映于黑暗之中，还真的关系不是特别大。</p><p>打个比方，十几年前，Z大计算机最优秀的同学，都以进入UT斯达康这样的外资企业为荣，只有面试不通过的才会默然跨过滨江，到当时毫不起眼的阿里去报到。谁能想到真正长成参天大树的，是人才和资源都要更低一档的阿里？舞台中央的聚光灯，也许亮不过三秒，就要掉头打向边缘，找寻下一个主角出场的地方。</p><p>所以，无论是顺境还是逆境，最好的策略永远都是：<strong>默默提升个人的眼界、认知与能力，不断发展和扩大有利因素，把眼前的事儿无论大小都干到超出所有人的预期</strong>。</p><p>飞机落地之后，我悄然给L发了条微信：养兵千日，利则尽出，不利则藏。</p><p>但愿下次见L，又是一副常胜将军的帅气模样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;朋友L算是朋友圈中集合聪明与勤奋于一身的佼佼者，本科毕业顺利保了专业排名第一学校的研究生，毕业后又直接去了某个技术出身创始人的大厂，一路职级顺风顺水到了技术专家，又兼任一支核心团队的Leader，我常戏称L简直是活在职场童话中的白马王子。北京初雪之前，匆匆在机场与L见了一面，第一感觉竟然是「老气横秋」，短短半个小时的交谈，充斥着负能量的抱怨。我一边忙不迭安慰，一边惊讶于白马王子和白雪公主的「婚姻」也会出问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换了个新总监，产品导向明显，技术Leader话语权变弱，技术导向的项目由产品经理来负责，显然不合理&lt;/li&gt;
&lt;li&gt;新总监对技术和业务都不熟悉，纯粹是外行指导内行，自己规划的技术路线频频受到干扰&lt;/li&gt;
&lt;li&gt;公司部门调整，原来的核心项目被划走，手头只剩下边缘业务，哪怕出了业绩老板也不会关注&lt;/li&gt;
&lt;li&gt;升任Leader之后沟通相关的琐事变多，而组内新人技术能力与悟性不如L，带起来很头疼&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然每一项吐槽都可以单独拎出来若干针对性的给出建议，但是飞机上想得更多的是，什么样的认知有助于L找到一个更好的工作状态？&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>技术思维与产品思维有高下之分吗？</title>
    <link href="http://guoze.me/thinking-technology-vs-product.html"/>
    <id>http://guoze.me/thinking-technology-vs-product.html</id>
    <published>2019-11-13T06:29:58.000Z</published>
    <updated>2019-11-13T06:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>技术和产品好比互联网这条大河中分出来的两条支流，刚开始并没有专门的产品经理岗位，设计产品的往往只是那些「爱管闲事」的工程师，像Jobs。哪怕直到现在Facebook和谷歌也没有设置产品经理这一岗位，对应的是产品工程师的概念，通常是由内部发起idea的工程师所担任，就要外部应聘也要来个coding面试的环节。</p><p>相较于技术工程师和产品经理的岗位区分，我更喜欢以技术思维和产品思维来区分，因为产品经理也可能具备技术思维，工程师也许是产品思维的践行者。旁听过不少公司内部的讨论，大家面红耳赤争辩不休的，也不乏是技术思维和产品思维的碰撞。也许有人会问，技术思维和产品思维有什么区别？是否产品思维就一定是更高层次的思维模式？是否技术思维就代表着更高成功的概率？以下分三点来剖析。</p><span id="more"></span><h2 id="技术思维重视实证，产品思维重视逻辑"><a href="#技术思维重视实证，产品思维重视逻辑" class="headerlink" title="技术思维重视实证，产品思维重视逻辑"></a>技术思维重视实证，产品思维重视逻辑</h2><p>有时某些刚毕业的工程师找我征求技术方案建议，会有如下的表达：<em>A方案这般这般，但我觉得会有甲乙丙丁的风险，换用B方案肯定会好一些</em>。我就下意识的想：这是一种产品思维的表达方式，用在技术选型之上会有大问题。纵观近一百年的科技发展史，硬要找一项核心的技术方法论，无非是八个字：大胆假设，小心求证，如果进一步浓缩到两个字，那就是「实证」。<strong>实证意味着所有的技术开发都是基于原型与实验的，不能是「我觉得」，而是要用可靠的最小可用原型和冷冰冰的实验数据来证明</strong>。「数据驱动」作为Facebook和头条的飞轮能转动起来的重要因素，正是一种典型的技术思维。</p><p>产品思维却是另外一套体系。也许是产品经理的工作范围往往只有大胆假设的前半部分，开发新产品（功能）又属于难以收集全面的数据且实验成本极高的决策，产品经理极其注重逻辑推断，也就是为什么能从A推导出B的思维模式。举个例子，滴滴顺风车最近恢复上线，但限制了女性用户在晚上8点之后打车，具备产品思维的人就会这么想：<em>如果滴滴顺风车经过了严格的安全整改，那为什么还要限制女性用户的打车时间？会不会反而招致用户对于安全性的隐忧？有没有更柔性的保护女性用户的方法</em>（比如更严格的匹配算法或是设立安全员）？<strong>产品传递的价值点之间是否会彼此矛盾，就是产品是否有逻辑的一个重要考量</strong>。优秀的产品其内在的一致性都非常坚固，这也是Apple和微信广受欢迎的基石。</p><p>可见无论重视实证还是重视逻辑，都可以找出做到极致而成功的企业，也都是日常实践中大有用处的方法论。与时俱进的产品经理需要掌握实证的方法（用实验数据验证逻辑），工程师也需要以严密的逻辑去加速技术选型的过程，并没有高下之分。</p><h2 id="技术思维重视实现，产品思维重视出发点"><a href="#技术思维重视实现，产品思维重视出发点" class="headerlink" title="技术思维重视实现，产品思维重视出发点"></a>技术思维重视实现，产品思维重视出发点</h2><p>抛一个产品需求出来，工程师的脑回路反应通常是：该怎么实现？技术难度多大？实现复杂程度多高？会给现有的系统增加什么风险？而产品经理的脑回路反应一般是：该不该有这个需求？背景是什么？用户需要的优先程度如何？有没有其他功能可替代？和现有的产品基本逻辑是否一致？</p><p>这也是两种思维模式的区别，技术思维更重视实现（怎么做），产品思维更重视出发点（做什么）。但是否做什么就一定比怎么做重要？我觉得要分两面看，如果你是一个老老实实做需求的工程师，对需求来者不拒出活很快，那么多想想做什么更有利于打怪升级；但如果你是一个天马行空想法很多的工程师（产品经理），怎么做就比做什么重要得多，因为再好的idea缺乏落地的路径便只是空想。另一个层面做什么与怎么做也会互相影响，<strong>做什么（毫无价值的功能点）会影响到怎么做的上限，而怎么做（技术上可不可行）会成为做什么的考量因素之一</strong>。</p><p>许多一线的工程师会有一个误区，觉得思考做什么更加高大上，对公司的业务价值也更大，其实不然。举个例子，多年前曾在一家业内最大的工业主板公司实习过，老板销售出身，但极其在意细节，有次他绘声绘色的讲了早年控制成本的一个故事：他与一线工程师挨个确认了主板上元器件的用途，发现有3个电阻对功能的影响可以忽略不计，于是把电路板的设计师拉过来痛骂了一顿，算了笔帐是这3个多余的电阻就给公司带来了多200万的成本。<strong>大部分场景下，做什么并没有太大的差异，而真正决定成败的是怎么做，因为魔鬼都隐藏在细节之中</strong>。</p><h2 id="技术思维重视底层突破，产品思维重视终端体验"><a href="#技术思维重视底层突破，产品思维重视终端体验" class="headerlink" title="技术思维重视底层突破，产品思维重视终端体验"></a>技术思维重视底层突破，产品思维重视终端体验</h2><p>我们今日的所有便利，本质上都是建立于技术进步与产品门槛变低的交替优化基础之上。举个例子，我们现在严重依赖的移动互联网，就建立在摩尔定理、光导纤维、蜂窝网络、多点触控等核心技术之上，而大多数技术在刚发明时受限于成本和实用性，面向的只是实验室或极少数的发烧友，但正是技术人不断挑战自我的极客精神，一步步把不可能变成了现实。就像陆奇所说的，我们一定要有一个坚定不移的深刻的理念，相信整个世界终究是为技术所驱动的。</p><p>但是让技术真正走进千家万户，真正让商业的飞轮转动起来的，并不只有技术进步的单一因素，还有产品门槛的降低。比如普及「个人电脑」概念的Apple Ⅱ，其实性能大幅度落后于专业的企业级计算机，但它打破了一个原本只是面向专业人士的小众市场。用户不用接触裸露的电路板，不用关注复杂的扩展槽，不需要远程登录中央电脑运行指令，这大大降低了门外汉使用电脑的门槛，足以开辟一个全新的蓝海市场。<strong>普通用户并不懂也并不关心技术的先进与否，只在意产品能不能满足需求，用起来爽不爽，上手够不够简单，成本又是否在可接受的范围内</strong>。</p><p>工程师不断努力的源泉，是让技术变得优雅、快速而强大，<strong>虽然对终端体验的短期影响是微弱的，但正是这种精益求精的技术精神推动着我们的世界一步步进化</strong>。借鉴一句老话，技术的价值总是在短期内被高估，但是在长期内又被低估。不过，离开产品思维去让技术落地，不扩大技术的受众面，技术又只是空中楼阁、无源之水、无根之木。技术惟有产品化，才能吸引更多的资本和人才，反过来又促进了技术的长期发展。</p><p>其实，技术思维和产品思维不妨双修。做技术的懂点产品，做产品的懂点技术没什么坏处，反过来也促进彼此间的理解与沟通。更重要的是，技术人要保持对技术的信仰，产品人要讲究产品的逻辑。</p><blockquote><p>延伸阅读：<a href="https://mp.weixin.qq.com/s/oyvyiaE3ETq0nEHuAQCo9Q">给程序员与产品经理的六个沟通锦囊</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;技术和产品好比互联网这条大河中分出来的两条支流，刚开始并没有专门的产品经理岗位，设计产品的往往只是那些「爱管闲事」的工程师，像Jobs。哪怕直到现在Facebook和谷歌也没有设置产品经理这一岗位，对应的是产品工程师的概念，通常是由内部发起idea的工程师所担任，就要外部应聘也要来个coding面试的环节。&lt;/p&gt;
&lt;p&gt;相较于技术工程师和产品经理的岗位区分，我更喜欢以技术思维和产品思维来区分，因为产品经理也可能具备技术思维，工程师也许是产品思维的践行者。旁听过不少公司内部的讨论，大家面红耳赤争辩不休的，也不乏是技术思维和产品思维的碰撞。也许有人会问，技术思维和产品思维有什么区别？是否产品思维就一定是更高层次的思维模式？是否技术思维就代表着更高成功的概率？以下分三点来剖析。&lt;/p&gt;</summary>
    
    
    
    <category term="梦中语" scheme="http://guoze.me/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>35岁不到P8，就成了明日黄花？</title>
    <link href="http://guoze.me/35-expired-p8.html"/>
    <id>http://guoze.me/35-expired-p8.html</id>
    <published>2019-11-06T04:22:56.000Z</published>
    <updated>2019-11-06T04:24:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知道从什么时候开始，什么东西上都有一个日期，秋刀鱼会过期，肉罐头会过期，连保鲜纸都会过期，我开始怀疑，在这个世界上，还有什么东西是不会过期的？ - 「重庆森林」</p></blockquote><p>本周爆出的<a href="https://mp.weixin.qq.com/s/scsIKODBJF0_h9AT0Pb6fQ">如何看待网传阿里巴巴蒋凡要求尽快实现P8全员35周岁以内？</a>吸睛无数，且不评论消息的真假，确定的年龄与职级赤裸裸的击碎了行业焦虑的最后一根稻草，噢，原来职级也会过期。</p><p>凡事都有两面性。焦虑也是一把双刃剑，好的一面是作为一股推力逼迫着人的进步，害怕不进步就会被时代所淘汰。但是，如果一昧沉浸于焦虑之中，自怨自艾或是抱怨大环境的不好，显然对改变客观的事实也没什么帮助。</p><p>年初曾经做了个花费很长时间的复盘，我发现所有内心焦虑的根源，都指向了过分在意短期的上下扰动，而忽视了长期的技能、眼界和资源的积累。我们这个行业太年轻又发展太快，早入行或是踏上风口的人获得了快速上升的门票，让我们误会了这种火箭般的速度是常态，口口相传的尽是些<em>三年升总监、五年升T4、30岁之前到P9</em>的英雄伟业，但火箭不可能一直上升，对行业而言，快速上下扰动的时代已经结束了，而哪怕踏上风口的幸运儿，如果没有足够的技能、眼界和资源的积累，飞得越高、摔得越重。</p><p>所以可预见的是，我们必须熟悉一个增长见顶的阶段，这个阶段里大部分35岁的人到不了P8或同等的职级，优秀的工程师需要等待5到10年才能被赋予管理者的角色，行业的淘汰轮转会加快，头部企业无论是招聘还是考核的要求都会进一步收紧。这个阶段里当35岁的门槛到来之际，是否P8已经那么不重要了，因为哪怕35岁的P8，也要担心40岁之时自己是否还是P8。如何让自己可以在职业的马拉松竞赛中以稳健的配速跑得更远，才是「中年人」首要考虑的问题。</p><p>作为距离门槛一只手都数得过来的「中年人」，对于这个问题老夫是有发言权的，抛出三个有待商榷的建议，权当一剂治疗明日黄花的解药。</p><span id="more"></span><h2 id="独树一帜的专业能力"><a href="#独树一帜的专业能力" class="headerlink" title="独树一帜的专业能力"></a>独树一帜的专业能力</h2><p>工程师容易陷入的一种误区是，过分强调软技能的重要性，反而忽视了专业能力的长期发展。无论从事哪个方向，专业能力始终是安身立命的基础所在，对整个架构有多熟悉，写的代码有多靠谱，新技术的吸收和应用有多灵活，出了问题能多快定位出来，才是对一名工程师价值判断的依据，而无论PPT展示多么华丽或者会议安排多么细致，都只能算是锦上添花的软技能，<strong>软技能只有在技术实力得到认可的前提下才有光环加成</strong>。如果把软技能放到专业能力之上，那就是本末倒置了。</p><p>专业能力分纵向和横向两个维度，<strong>工程师的最佳模板是一专多能的T型人才</strong>。以算法工程师为例，一专代表着对某一领域有绝对精深的了解，无论是排序、召回、图网络模型、自然语言处理或是图像识别，透彻程度足以成为整个团队独树一帜的存在，足以在短时间内根据不同的业务场景构建起一个业界标杆水平的技术方案，足以在出现问题时以本能反应追踪到该去排查的链条。一专除了有助于短期内在一个新团队建立认可，当你在某一领域足够精通，你也自然获得了快速入门其他领域的方法论，概览式的阅读其他领域知识自然也是小菜一碟，所以<strong>一专也利于多能，在某一领域达到了足够的深度，快速扩展其他领域的认知就更轻松</strong>。但是，只精通某一领域一辈子只舞弄三板斧也是不够的，文体两开花才能打通上下游的链条，支撑起更大规模的系统建设。仍以算法工程师为例，如果只懂算法推导，不懂数据生成，不懂统计概率，不懂线上服务，不懂大数据平台，且不论合不合格，在工业界存活都是难题。</p><p>对应管理者，同样不可过分强调纯管理的作用，以为管理就是分派任务，反而忽视了技术管理是以技术为本。<strong>重视技术就是对于细节的极致关注，而细节往往是成事的关键</strong>。举个例子，身为百度总裁的陆奇虽然很久没有写代码，但仍然坚持读核心框架的代码，要求自己能达到与最优秀架构师旗鼓相当讨论的程度。管理者如果不能处于技术的前沿，那团队也将是很危险的，因为领头羊失去了判断好坏的能力，技术选型、人才招聘和团队成长的方向就容易出现偏离。</p><h2 id="时刻关注护城河的宽度"><a href="#时刻关注护城河的宽度" class="headerlink" title="时刻关注护城河的宽度"></a>时刻关注护城河的宽度</h2><p>技术产业最为残酷的一点，就是每隔五到十年，基础设施就会出现一次大洗牌。大洗牌之后，上一代基础设施的高手，知识和技能并不能直接迁移到下一代，反而高手作为既得利益者会排斥技术的革新。这不仅是互联网独有的现象，既给新人带来了快速上升的机会，也为老人造成了恐慌。</p><p>亚马逊的创始人贝索斯曾说过一句名言，<strong>要把所有的资源all in在不变的趋势上</strong>。也许有点偏激，但对于技术人的长青却值得参照。除了要追逐沧海桑田的「术」（基础设施），还必须掌握万变不离其宗的「道」（逻辑与方法论）。技术演进也许飞快，但技术演进背后的逻辑却是相对一致的。所以技术的精进不能只依附于某一代的基础设施之上，只埋头于弄清楚基础设施的每一细节，技术原理、设计逻辑和演进趋势却没有弄明白。从算法的角度讲，这就是<code>过拟合</code>了，训练样本学得太好，以致失去了对新样本的泛化能力，反而容易在基础设施更新换代之际被无情淘汰。「道」与「术」相比，是更宽广的护城河。</p><p>对职业的选择也是如此。近来有一家业内快速窜升的公司风头正劲，不少朋友纷纷收到了他家的offer，过来询问我的意见。我的看法是，<strong>这是一家独一无二的企业吗？它的护城河有多宽广？</strong>评价护城河够不够宽，主要看两点，一是迁移成本，假设有一天目标企业灰飞烟灭了，用户是非常痛苦难以找到替代品还是迅速遗忘并投入竞争对手的怀抱？二是网络效应，目标企业依靠庞大的网络或数据优势，能不能给予用户超出竞争对手一倍以上的用户体验？如果这两个问题都是<code>YES</code>的话闭着眼睛都能去。这恰恰是不少工程师浑浑噩噩的点，大多数人会认为，我只是个写代码的，为什么要关心这些？<strong>事实上要做到技术的长青，你就不能只盯着技术，而必须时时盯着趋势</strong>。至少我就是周边惟一一个不炒股但会看财报的人（大笑）。</p><h2 id="远离穷忙，坚持创新，及时清零"><a href="#远离穷忙，坚持创新，及时清零" class="headerlink" title="远离穷忙，坚持创新，及时清零"></a>远离穷忙，坚持创新，及时清零</h2><p>另一种误区是，以为职业安全的必经之路是<code>996</code>，只要身体好能加班就不是什么问题。事实上有价值的并不是肉体上的加班，而是精神上始终要保持一个在线的状态，深入思考怎么能创造更大的业务价值，同时时刻盯紧长期技能的提升。一线工程师往往为业务所累，一旦不愿意动脑了，就沉迷于低质量的重复工作难以自拔，但如果现有的工作去年你能做今年你也能做，那么企业为什么不雇佣一个去年的你（还更便宜）？我的建议是，低质量的重复工作，做之前要问自己三个问题：<strong>是不是必须自己动手？可不可以自动化避免每次都重复？有没有其他事情比它更紧急（重要）？</strong>如果确认了是必须完成的任务，最好能集中一个时间统一处理，保证最高效的时间用以解决更加困难和更加优先的问题。</p><p>谈到创新，有一些工程师要皱眉头了，大企业暮气沉沉，人人都怕承担失败的风险，创新谈何容易？首先，我们高估了创新的门槛，创新并非都得推倒重来，<strong>创新是对抗大家都习以为常的错误代码</strong>。改进一个不合理的数据流程，把人工审核变成机器规则，往神经网络中添加一个<code>Attention</code>，都是体现个人创造力的行动。其次，创新不只是技术创新，梳理一个新项目的执行规划，指出产品设计中违反人性的槽点，整合一个外部的数据以提升模型的性能，都是创新的落脚点，对项目的贡献也不一定比技术创新要小。最后<strong>创新还意味着持续挑战自我的边界，而不满足于承担轻松的工作</strong>。职业安全只有一种，就是不断胜任超越级别的角色，一个能胜任P9级别角色的P8，就永远不用担心35岁的饭碗问题。</p><p>之前沟通绩效的时候，最后我总会提醒大家一个点，绩效只对过去有效，从新的绩效周期开始，不管是最高还是最低，都像一个符号一样被清零了，所有人包括我自己都回到了同一起跑线上。跳出绩效之外，P7或P8也同样只是个符号而已，丢掉这些符号，<code>Reset</code>键该按就按，P7就P7，被优化就被优化，大不了重头再来。不要让惰性肆意滋长，哪怕油腻猥琐哪怕出门要揣上保温杯，也要纹一只猛虎在心间。</p><p>当然，还是愿大家的职级永不过期，春风十里扬州路，衣锦夜行暴发户，用不着老夫这三剂解药。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不知道从什么时候开始，什么东西上都有一个日期，秋刀鱼会过期，肉罐头会过期，连保鲜纸都会过期，我开始怀疑，在这个世界上，还有什么东西是不会过期的？ - 「重庆森林」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本周爆出的&lt;a href=&quot;https://mp.weixin.qq.com/s/scsIKODBJF0_h9AT0Pb6fQ&quot;&gt;如何看待网传阿里巴巴蒋凡要求尽快实现P8全员35周岁以内？&lt;/a&gt;吸睛无数，且不评论消息的真假，确定的年龄与职级赤裸裸的击碎了行业焦虑的最后一根稻草，噢，原来职级也会过期。&lt;/p&gt;
&lt;p&gt;凡事都有两面性。焦虑也是一把双刃剑，好的一面是作为一股推力逼迫着人的进步，害怕不进步就会被时代所淘汰。但是，如果一昧沉浸于焦虑之中，自怨自艾或是抱怨大环境的不好，显然对改变客观的事实也没什么帮助。&lt;/p&gt;
&lt;p&gt;年初曾经做了个花费很长时间的复盘，我发现所有内心焦虑的根源，都指向了过分在意短期的上下扰动，而忽视了长期的技能、眼界和资源的积累。我们这个行业太年轻又发展太快，早入行或是踏上风口的人获得了快速上升的门票，让我们误会了这种火箭般的速度是常态，口口相传的尽是些&lt;em&gt;三年升总监、五年升T4、30岁之前到P9&lt;/em&gt;的英雄伟业，但火箭不可能一直上升，对行业而言，快速上下扰动的时代已经结束了，而哪怕踏上风口的幸运儿，如果没有足够的技能、眼界和资源的积累，飞得越高、摔得越重。&lt;/p&gt;
&lt;p&gt;所以可预见的是，我们必须熟悉一个增长见顶的阶段，这个阶段里大部分35岁的人到不了P8或同等的职级，优秀的工程师需要等待5到10年才能被赋予管理者的角色，行业的淘汰轮转会加快，头部企业无论是招聘还是考核的要求都会进一步收紧。这个阶段里当35岁的门槛到来之际，是否P8已经那么不重要了，因为哪怕35岁的P8，也要担心40岁之时自己是否还是P8。如何让自己可以在职业的马拉松竞赛中以稳健的配速跑得更远，才是「中年人」首要考虑的问题。&lt;/p&gt;
&lt;p&gt;作为距离门槛一只手都数得过来的「中年人」，对于这个问题老夫是有发言权的，抛出三个有待商榷的建议，权当一剂治疗明日黄花的解药。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>怎样才算一份好工作？</title>
    <link href="http://guoze.me/good-job.html"/>
    <id>http://guoze.me/good-job.html</id>
    <published>2019-10-28T02:23:22.000Z</published>
    <updated>2019-10-28T02:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来有几个好友遇到了职场的转折点，颇有些纠结，时不时就来「骚扰」我一下：</p><ul><li>A公司开了一个XXX package的offer，该不该去？</li><li>上级匹配了B公司的薪酬，做了扩大队伍的承诺，该不该留？</li><li>C公司给了XXX级别的许诺，可不可以再谈？</li><li>……</li></ul><p>我发现大部分技术人做职场转换（包括跳槽或内部转岗），总是盯着明面上的东西，比如薪酬、职级或是职位。固然，真金白银能说明很多问题，愿意付出高薪的公司多半是现金流不愁且重视基层员工的价值，职级代表了对候选人专业能力的肯定，职位又与你在组织里能发挥的影响力息息相关。</p><p>但是，除了明面的条件，有没有哪些软性的标准能评价一份工作的好坏？想清楚这个问题其实对每个职业人都异常重要，以我自己为例，除了做职场转换时能更精准的评估对方岗位的吸引力，以及对处在当前位置该往哪个方向努力更通透，还能明白自己该为团队创造哪些条件，毕竟明面的条件更多由组织所决定（大笑）。</p><span id="more"></span><p>还好近期读了布赖恩·费瑟斯通豪的「远见：如何规划职业生涯3大阶段」一书中，书中提出的职场燃料的概念让我印象深刻：<strong>充足的职场燃料让我们在后续的职业生涯中所获得的选择空间更大，职业生涯也能走得更远</strong>。职场燃料包括三种，一是可迁移的技能、二是有意义的经验、三是持久的关系。不妨我们就将这三种职场燃料映射到技术人身上，作为评价工作好坏的软性标准。</p><h2 id="工作饱和而紧张，可以沉淀解决通用问题的方法论"><a href="#工作饱和而紧张，可以沉淀解决通用问题的方法论" class="headerlink" title="工作饱和而紧张，可以沉淀解决通用问题的方法论"></a>工作饱和而紧张，可以沉淀解决通用问题的方法论</h2><p>曾经有位朋友从一个清闲的岗位转换到一个忙碌的岗位，别人都很不解，因为按小时计的薪酬显然是下降了，他这么回复，在我们这个行业，朝九晚五让人惶恐不安。且不评价这句话的对错（我是反对盲目<code>996</code>的），饱和与否确实是评估工作是否靠谱的因素之一，一方面工作饱和说明团队业务不愁，能保证职业的安全和稳定，另一方面饱和的工作条件下更容易激发人的工作潜能。只有工作饱和了，才会想到如何去有效管理时间，才会去判断任务的轻重缓急，才会累积快速定位与解决bug或其他不可思议问题的经验，才会日思夜想怎么抓住核心的优化点快速出业绩。</p><p>「方法论」是我们在晋升答辩中相当看重的一个能力。<strong>方法论就是当你阅尽千帆之后留下的套路，技术人有了方法论，好比是机关枪换了散弹枪，一枪可以解决好几个敌人</strong>。方法论的沉淀除了要有升维思考的意识，也取决于待解决的问题不可太窄、不可太浅、不可太偏运营。比如反欺诈的问题，从运营的角度切入固然可以找到许多有效的方法，然而长期做下去就会导致技术收敛在一个较窄的领域，不利于扩展职业选择的空间，但如果从数据的角度切入，可以尝试的方法就宽广很多，也有机会将其他领域的技术融会贯通。</p><h2 id="有规模效应，技术选型有前瞻性"><a href="#有规模效应，技术选型有前瞻性" class="headerlink" title="有规模效应，技术选型有前瞻性"></a>有规模效应，技术选型有前瞻性</h2><p>有意义的经验我个人认为比平台的光环更有助于长远的职业发展。举个例子，我曾经在一家中型企业的数据中台部门工作过，当时从同事到领导都是泥腿子洗脚上田，从客户端到后台的背景都有，企业后期的发展也遭受了一些波折，中途不时有大牛加入又迅速离开，然而最终留守的兄弟们无论是留是走都有不错的机会，原因就是部门倾全力打造了一个面向信息流的推荐系统，而整个推荐系统所使用的技术虽然是从零到一搭起来的，但从一开始就锚定了业界最前沿的实践，得到第一手经验的候选人自然得到了其他优秀平台的追捧。</p><p>这些候选人能得到充足的职场燃料，除了流量中心背后产生的规模效应，还得益于技术负责人选型时的前瞻性。当我刚从事技术工作的时候，有两位前辈对我影响最大，他们技术选型的偏好也南辕北辙，一位十分激进，业界任何新的算法或是框架都要刨根究底，一位却十分保守，可以将四五年前提出的技术落地得华丽实用且毫不过时。但如果问我的偏好，我倾向于<strong>技术主干的激进</strong>。倒不是说每篇轰动一时的Paper都要去跟进，但是要时刻跟进业界其他领先团队的经验，一旦工业界有成熟的应用，就认为这项技术被<code>merge</code>进了技术主干，必须去尝试在现有场景之中是否有收益，比如阿里的<code>Deep Interest Network</code>就是一个适合工业界点击率预估场景的算法，不追的话团队对技术前沿的敏感性是问题的。<strong>对技术人而言，做的事情有规模效应，有挑战难度，团队有技术前瞻性，就等同于有价值的经验，就是好工作的入围条件</strong>。</p><h2 id="重视人的成长，而不是把人当做完成任务的工具"><a href="#重视人的成长，而不是把人当做完成任务的工具" class="headerlink" title="重视人的成长，而不是把人当做完成任务的工具"></a>重视人的成长，而不是把人当做完成任务的工具</h2><p>之前在<a href="https://mp.weixin.qq.com/s/0ND55eYjb5iInYAexB6xJg">菜鸟工程师的超神之路 – 从校园到职场</a>有提到一个点，新人的一大误区是把学习当做工作的目标，因为公司支付你的薪水，并不是让你来这里学习，而是要为公司创造价值的。然而，我们也要避免掉入另一个极端，就是面向KPI而工作，更可怕的是一旦这种价值观上升为团队甚至公司的价值观，就会把人变成冷冰冰的工具看待，只为了「成事」而不顾「成人」。我们生在一个瞬息万变的时代，项目能不能成，受到内部外部复杂因素的综合影响，但优秀的团队往往屡败屡战越打越强，可以从失败中迅速成长，下次抓住一个好时机就搞定了。<strong>好工作意味着能把打造团队本身作为重点的项目去考虑</strong>。除了搞定项目，还会腾出时间做好文档沉淀、Code Review、技术分享、项目交流等有益于成员能力提升的事情。</p><p>此外，我也会在意招聘时对方流露出来的温度感，至少有两次职场转换我有把直属领导的诚意纳入考量之中，这种温度感在冰山之下代表的是对打造优秀团队的热烈渴求，而不是谁来都一样，也往往说明团队在职业之内和职业之外建立持久关系的一种努力。将心比心当我在招聘时遇到优秀的候选人，我也会不厌其烦邀请他（她）加入我的团队，为他（她）的加盟争取允许范围内的一切条件。彼得·蒂尔谈到他早年在一家律师事务所的职业经历，同事个个都很出色，但之间的关系却异常淡薄，他只待了很短的时间就离开了团队，因为将时间浪费在不能长久合作的人身上得不偿失。铁打的营盘流水的兵，对于平均在职时间仅有1.47年的技术行业更是如此。职业早期的跳槽往往靠投简历或者猎头就能解决，越往高处走岗位对外开放的程度越低，往往仅在某些人脉网络之中流通，不是众所周知的大牛人物的话，就必须靠持久的关系来加成。<strong>好工作还意味着鼓励成员间建立持久关系的氛围</strong>。这不仅仅靠面聊、饭局或是团建就能做起来，更依赖于团队整体在追求卓越基础之上的充分沟通和相互信赖。</p><p>当然，除了做职场转换时可以用这三个条件评估好坏，平时工作之中也不妨往可迁移的技能、有意义的经验、持久的关系三个方向多做积累。祝大家无论做任何的决定，都给自己的职场，加满油。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近来有几个好友遇到了职场的转折点，颇有些纠结，时不时就来「骚扰」我一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A公司开了一个XXX package的offer，该不该去？&lt;/li&gt;
&lt;li&gt;上级匹配了B公司的薪酬，做了扩大队伍的承诺，该不该留？&lt;/li&gt;
&lt;li&gt;C公司给了XXX级别的许诺，可不可以再谈？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我发现大部分技术人做职场转换（包括跳槽或内部转岗），总是盯着明面上的东西，比如薪酬、职级或是职位。固然，真金白银能说明很多问题，愿意付出高薪的公司多半是现金流不愁且重视基层员工的价值，职级代表了对候选人专业能力的肯定，职位又与你在组织里能发挥的影响力息息相关。&lt;/p&gt;
&lt;p&gt;但是，除了明面的条件，有没有哪些软性的标准能评价一份工作的好坏？想清楚这个问题其实对每个职业人都异常重要，以我自己为例，除了做职场转换时能更精准的评估对方岗位的吸引力，以及对处在当前位置该往哪个方向努力更通透，还能明白自己该为团队创造哪些条件，毕竟明面的条件更多由组织所决定（大笑）。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人为什么该坚持写作？</title>
    <link href="http://guoze.me/tech-writing.html"/>
    <id>http://guoze.me/tech-writing.html</id>
    <published>2019-10-21T03:19:11.000Z</published>
    <updated>2019-10-21T03:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得毕业刚满一年的时候，机缘巧合参加了一次资深技术人的聚会，席间讨论的主题恰好是：<strong>技术人业余时间做什么最有价值？</strong>除了健身之外，获得最多人认可的选项就是写作。这也是促成我开启技术博客的一个契机，到现在我都认为这笔生意做得很值当，也通过写作认识了许多比我更擅长写作的技术达人，懊悔的是没有更早开始，没有长期坚持，而是时不时就断更。</p><p>那么写作给我带来什么好处呢？至少有以下三点。</p><span id="more"></span><h2 id="写作是让思考体系化的有效方式"><a href="#写作是让思考体系化的有效方式" class="headerlink" title="写作是让思考体系化的有效方式"></a>写作是让思考体系化的有效方式</h2><p>书面表达与口头表达最大的差异，是口头表达只需要告诉对方发生了什么，而书面表达需要把一个事情全面而透彻的讲清楚，前者如何把想法传进对方的心底更重要，后者如何建立一个坚实的思维框架更重要。且不说历史上不可尽数的牛人都是写作的大师，写文章与写代码本来就十分相似，优秀的作家与优秀的程序员一样都是体系的架构者。然而大部分初级的技术人没有机会去做一个足够大的系统，大部分时间是在处理点状的问题，这时写作就等于创造了一个能够升维思考的契机，让你可以把点连成线汇成面。举个例子，当你需要给刚做过的某个项目写一份总结文档，为了避免受众一脸懵逼，你不得不去想：</p><ul><li>我做这个项目是为了解决什么问题？</li><li>在整个系统之中我的项目起到了什么作用？</li><li>业界其他领先团队在面对这个问题时会采用什么方案？</li><li>我的方案与他们对比有什么优势？</li><li>未来有哪些潜在的可迭代优化的方向？</li></ul><p>而当你把这些问题都想明白写透彻，就等于干了比你高一到两个技术级别的同事的活，自然比原来只精通那一亩三分地的细节要强得多。<strong>写作，首先是一条成长之道</strong>。</p><h2 id="写作是驱动学习的有效方式"><a href="#写作是驱动学习的有效方式" class="headerlink" title="写作是驱动学习的有效方式"></a>写作是驱动学习的有效方式</h2><p>写作无疑是需要大量知识沉淀的，如果不具备相关领域的丰富知识，很难写出真正有干货的文章。所以，写作是一个逼着自己去深入了解领域知识的好办法，普遍意义的学习仅仅只是获取信息而已，没有经过实践或其他方式的转化，知识不过是暂存在你大脑的某个内存空间，是一个没有被充分训练的特征值，而写作就是性价比最高的知识转化方式。举个我自己的例子，刚毕业时因为工作中要使用一种算法，必须在短时间内精通这种算法的每一个细节，于是遍览了所有经搜索引擎可找到的优质资料，后来觉得单凭阅读的学习效率太低了，索性开了个专栏连着写了三篇文章介绍自己对该种算法的理解，三年之后回头看竟然在谷歌的索引排序都不低。学习的方式有许多种，靠阅读是一种，靠实践是一种，靠交流是一种，但都不如靠写作来得有效，因为只有能把一个东西成体系的表达出来，才真的算融会贯通。<strong>写作，其次是一条学习之道</strong>。</p><h2 id="写作是扩大沟通范围的有效方式"><a href="#写作是扩大沟通范围的有效方式" class="headerlink" title="写作是扩大沟通范围的有效方式"></a>写作是扩大沟通范围的有效方式</h2><p>除了上台演讲，大部分场景技术人的沟通范围是有限的，而写作等于创造了一个与理论上人数没有上限的受众沟通的机会，你有机会让更多人了解你的思想、框架、技能与方法。而除开写作之外的其他方式，几乎都很难如此系统的表达自我。麦肯锡有一条著名的30秒电梯理论，意为如果不能在电梯从1层到30层的运行过程中把事情表述清楚，对方将不会再有兴趣与你就此事交流，虽然这是一个典型的商业场景，却也体现了口头表达的困境，口头表达必须集中火力讲一两个点、必须投对方所好创造共同话题、必须有趣精彩引人入胜，而写作却不必如此，哪怕是一篇枯燥乏味的技术文档，也大可郑重其事的当做在创造一个我的世界。有这么一类技术人，他们在现实生活中木讷寡言，开个玩笑都会老脸一红，写起东西来却洋洋洒洒眼界宏大光彩照人，丝毫不影响圈粉无数。<strong>写作，最后是一条沟通之道</strong>。</p><p>写到这儿估计有小伙伴要举手了：我也知道写作有诸多好处，然而一来工作忙成狗，二来无从下笔，怎么破？</p><p>万事开头难，然后中间难结尾难。上中学时就为了作文凑够800字生不如死，现在猝不及防都要_996.icu_了，晚上下班还得挑灯夜战写东西，这简直要老命了。而且写什么更是想破了脑袋，写点技术怕写出来贻笑大方，写点生活更怕平淡如水写成碎碎念，该写什么？我太「南」了。</p><p>别怕，都是这么过来的。送上三个锦囊，给即将开始写作的技术人。</p><h2 id="从你熟悉的领域开始，或者多写技术或工作文档"><a href="#从你熟悉的领域开始，或者多写技术或工作文档" class="headerlink" title="从你熟悉的领域开始，或者多写技术或工作文档"></a>从你熟悉的领域开始，或者多写技术或工作文档</h2><p>我们生活在一个差异性越来越重要的世界。哪怕一个等级超高的技术天才，也难以成为全部领域的专才。反过来想，哪怕是遇到一个阿里P9以上的大牛，总有一些你懂他不懂的东西，也许是一个小众的配置文件系统，也许是一种冷门到被人遗忘的算法，也许是搞定某个业务专项的trick。当你开始分享时，不妨从这些你所熟悉的领域开始，因为你就是这个领域无可争议的王者段位选手，能有充分的自信把文章写「顺」，继而找到文字表达这项技艺的感觉。自信与感觉，对刚开始写作的技术人而言至关重要。</p><p>假如你现在扫描了一遍自己的大脑，然而没有发现上面所说的特别擅长的领域，那么我会建议你由技术文档或者工作文档开始。文档就像造火箭盖楼房的设计草图，重要性不言而喻，但我接触的许多程序员恰恰是很排斥写文档的，宁愿写多几行代码。其实文档是一个帮助你从作者思维升级到读者思维的好工具，因为文档是写给小白看的，怎么让一个小白顺着你的文档跑起来，哪些步骤要走起来，哪些细节需要重点标识，其实就是一项琢磨受众需要什么的练习。</p><h2 id="从小范围的分享开始，像写代码一样的最佳实践"><a href="#从小范围的分享开始，像写代码一样的最佳实践" class="headerlink" title="从小范围的分享开始，像写代码一样的最佳实践"></a>从小范围的分享开始，像写代码一样的最佳实践</h2><p>放心，怕写不好是所有的人刚起步时的共同担心。所以我们可以从身边的同事开始，比如做一个小组级别的文档分享，然后慢慢到部门内、公司内的文档分享，等自己更有把握了，再扩大到不熟悉的受众。循序渐进有助于培养写作的自信，也更便于收集身边人的反馈，通过小范围的试错迭代内容。一旦验证文章能对读者产生帮助，就可以进一步扩大传播，无论公众号、知乎还是技术博客都是一个适合优质内容沉淀和传播的选项（<em>当然，文章不可包含不宜公开的内容</em>）。</p><p>写作和编程的最佳实践是极其相似的，首先在纸上列一个简要的提纲，想明白自己期望表达的重点内容，其次开始写初稿，这个初稿遵循的原则是先完成再完美，把想表达的内容顺畅传递出来就好了，最后不可少的是花一点时间重构：也许是调整段落之间的顺序，也许是为某个不够接地气的部分增加case，也许是修改表达的措施细节，与软件的重构相似，文章的重构消除了「坏味道」，提高了文章的可读性。</p><h2 id="定时定量写作，排除社交杂音的干扰"><a href="#定时定量写作，排除社交杂音的干扰" class="headerlink" title="定时定量写作，排除社交杂音的干扰"></a>定时定量写作，排除社交杂音的干扰</h2><p>我有一个习惯，是用苹果的日历记录自己过往的时间耗费，反正花在「工作」类目上的时间是绝对超过<code>12 * 6</code>的，但如果每天回到家还没觉得筋疲力尽，就会继续掏出笔记本写点东西。得益于文档同步工具，我也会不定期在上下班通勤的过程中利用手机接着写（<em>移动端写作的速度并不见得慢</em>）。然而，我建议所有刚开始写作的技术人，先给自己制定一个写作的计划，再给自己制定一个写作的<code>KPI</code>，比如工作日每天写200字、节假日每天写500字之类的，由易到难，如果害怕坚持不住的，可以定一个<code>写作时间</code>，和写代码一样写作也是需要沉浸的，把手机调到<code>勿扰模式</code>并反扣在桌面，关闭一切社交客户端与网页，全身心投入其中。只要平衡得好，写作并不为繁重的业务所累，反而会对工作有正向的推动，因为提升了思考与总结的能力。作家冯唐就是在一路晋升麦肯锡合伙人的几年间，在每周80小时+的工作时长之外，完成了6本小说、2本杂文集的出版。</p><p>大学时有幸成为一个知名企业家的弟子，曾有一次面谈，聊到他对年轻人的要求，总结为六个字：<strong>能做、会说、善写</strong>。我想对技术人也是如此，期待这篇小文章激发到一些人的写作潜力，为技术圈创造更多的知识沉淀。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记得毕业刚满一年的时候，机缘巧合参加了一次资深技术人的聚会，席间讨论的主题恰好是：&lt;strong&gt;技术人业余时间做什么最有价值？&lt;/strong&gt;除了健身之外，获得最多人认可的选项就是写作。这也是促成我开启技术博客的一个契机，到现在我都认为这笔生意做得很值当，也通过写作认识了许多比我更擅长写作的技术达人，懊悔的是没有更早开始，没有长期坚持，而是时不时就断更。&lt;/p&gt;
&lt;p&gt;那么写作给我带来什么好处呢？至少有以下三点。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>算法岗有没有泡沫</title>
    <link href="http://guoze.me/algorithm-bubble.html"/>
    <id>http://guoze.me/algorithm-bubble.html</id>
    <published>2019-10-10T06:11:34.000Z</published>
    <updated>2019-10-10T06:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>新近组了个饭局，发现来的各大厂的算法leader，都一副萎靡不振的模样，一问，都忙着筛秋招的简历呢，今年这秋招，投算法的像雪片一样飞过来，大抵高校计算机类的导师，都纷纷转型深度学习了，而候选人也个个刷过比赛，不拿到前几名都不好意思说出来，算法原理更是倒背如流。于是算法岗的面试官都是筛简历筛到老眼昏花，<em>来左边儿一起画个顶会，在你右边再画个Kaggle</em>，繁重的业务之外，面试更是一场接一场，面人面得头痛欲裂。</p><p>有人说，这是算法岗的泡沫，一触即破，好比回溯几年前的客户端开发，随便上个培训班就可以收割offer了，等风潮一过铁定凉凉。</p><p>面对层出不穷的劝退帖，我嘿然一笑，短期泡沫肯定是存在的，但是放长到十年维度的时间来看，投算法岗有没有问题？我觉得依然是应届生较好的一个选择，理由有三。</p><span id="more"></span><h2 id="存储在云端的数据仍然处于迅速增长之中"><a href="#存储在云端的数据仍然处于迅速增长之中" class="headerlink" title="存储在云端的数据仍然处于迅速增长之中"></a>存储在云端的数据仍然处于迅速增长之中</h2><p>算法的实质，无非就是更高效更精准的实现数据之间的匹配。AI爆火的根本原因，既不在于神经网络的崛起，也不在于分布式计算的普及，而是数据量的暴增使得依赖算法匹配数据成为一个划算的生意。放眼未来，虽然互联网人口的红利已经接近饱和，数据这个基础引擎仍然维持着超过50%的年增长率。这一方面得益于创造内容的门槛被极大拉低，另一方面也说明数据的价值得到了普遍的认同，对数据的收集和利用越发精细。数据越多，处理和提炼数据的复杂度就越高，自然会产生更多更大的算法需求。数据增长的引擎不熄火，持续有数据匹配的需求，就持续有算法岗的空缺。</p><h2 id="算法岗的入门门槛更高"><a href="#算法岗的入门门槛更高" class="headerlink" title="算法岗的入门门槛更高"></a>算法岗的入门门槛更高</h2><p>算法工程师处在研发和研究两个领域的交叉点，难以想象有哪个技术岗位对于学术论文阅读的要求，可与算法岗相匹敌。哪怕撇开学历绩点、学术履历、实践经验等方面的硬性要求，公式的理解和推导仍然是顶级的智力游戏。这就决定了算法岗的入门门槛本来就相对要更高，而随着AI的爆火，越来越多的候选人涌入，算法岗的竞争残酷程度上升了好几个量级，前刷刷题背背西瓜书就能手抓一把好offer的时代一去不复返了。</p><p><strong>但凡竞争激烈的岗位，哪怕不是最优的选择，也肯定是一个较好的选择</strong>。因为能跨越入门门槛的，本来就是智力和勤奋程度更出色的候选人，有机会和更聪明更努力的人一起工作，会对你的职业生涯有非常正向的推动。多年前做高考咨询，有位小朋友问我，A高校专业排名第三但分数较低，B高校专业排名第五但分数较高，该选哪个？我建议去B，因为录取分数决定了同学的智力与勤奋程度，而专业排名更多取决于实验室的研究实力，不是向着留校任教这条路没必要考虑。选择职业也是如此，从前最聪明的学生都在考CFA准备进投行咨询，现在最聪明的学生都在忙着神经网络调参打比赛，本质上是一样的。只要具备追逐泡沫的条件，就应该投身其中，因为全局最优对于应届生的阅历绝对是一个NP难问题，倒不如梯度下降法这类朴素的优化思路来得实际，找准一个方向，先做到极致。我见过顶会可以打牌但最终转型的美女产品经理，也见过连续Top绩效然后转岗做算法的后台开发，都不影响他们华丽转身之后大杀四方。</p><h2 id="算法岗的成长曲线更陡峭"><a href="#算法岗的成长曲线更陡峭" class="headerlink" title="算法岗的成长曲线更陡峭"></a>算法岗的成长曲线更陡峭</h2><p>优秀的算法工程师，必须在数学、编程、数据分析、业务理解四个方面的能力沉淀上都不可有短板，挑战难度更大，学习曲线更陡峭。当然，更陡峭的成长曲线除了意味着只有极少数人能走到顶端，能独当一面的人才永远是一将难求，也意味着技术成长的上限更高周期更长，你不需要在步入职场的五到十年之后就遇到技术成长的瓶颈，只能依靠转管理来延长职业寿命，如果你愿意在技术领域持续精进，算法岗是一个非常好的方向。</p><p>但是，对于有志于算法岗的应届生，我仍然有以下三个求职建议给你们：</p><h2 id="从大平台开始，尽量逼近流量中心"><a href="#从大平台开始，尽量逼近流量中心" class="headerlink" title="从大平台开始，尽量逼近流量中心"></a>从大平台开始，尽量逼近流量中心</h2><p>许多年前互联网的江湖还是后台开发薪资最高，HR习惯用不同量级的DAU对应不同的薪资：千万级别的要比百万级别的差一截，亿级别的那就是江湖罕见的大牛了，如果有愿意动的都是抢着开价。后台开发的技术本身并不是什么奥秘，但随着用户数的上涨，再合理的架构也会遇到各种意料之外的挑战，而解决问题的方法往往充满灵光一现的巧妙，不经历是永远不会知道的。拥有市场上稀缺的经验，是一个职业履历的加分项。算法岗也是类似，你所服务的用户越多，分众越细，算法匹配能产生的额外价值越大；线上对资源和耗时的要求也更加严格，面临算法效果和算法性能的trade off也更加复杂。当选择offer的时候，不妨暂把薪资条件放一边，优先看哪个offer有机会（不一定是现在，也许是未来）去创造服务到更多用户的算法，为长远的职业发展构筑更坚实的基础。</p><h2 id="选择搜索或推荐等与用户关系更密切的领域"><a href="#选择搜索或推荐等与用户关系更密切的领域" class="headerlink" title="选择搜索或推荐等与用户关系更密切的领域"></a>选择搜索或推荐等与用户关系更密切的领域</h2><p>深度学习这一轮的发展，是从图像和语音这类相对通用的领域发起的，面向通用领域的算法工程师，<code>算法味</code>会更浓一些，和学术研究挂钩更紧密一些，具体到工作内容，更多需要独自攻坚某个课题，和产品、运营横向打交道的机会少一些，发展空间偏纵向求深度，当然产出论文的机会更多。<strong>这类岗位更适合目标比较明确、能静下心花很长时间把一个问题搞深搞透的人</strong>。当然，对于算法岗的这一分支，我仍然觉得最合适的做法是先读取相应领域的博士，在学术界积累够做研究的方法论以后再到工业界来。此外，这一类岗位面向通用领域的算法岗，因为业务特殊性不显著，容易出现赢家通吃的局面，给小平台或小团队的生存空间很小，选择平台之时要更加谨慎。其实对于算法岗的候选人，更广袤的天地在于搜索或推荐等和用户息息相关的强业务领域。这类领域没有一招鲜的万金油方法，更多需要埋首于业务之中，从业务目标、数据、特征、算法、策略等多个维度找到最优的结合点，通过实验系统快速试错与提升指标。<strong>这才是大部分优秀算法工程师脱颖而出的残酷丛林，也是更适合普通人升级打怪的成长路径</strong>。</p><h2 id="有机会的话去做在线算法吧！"><a href="#有机会的话去做在线算法吧！" class="headerlink" title="有机会的话去做在线算法吧！"></a>有机会的话去做在线算法吧！</h2><p><strong>在线算法是指它可以以序列化的方式处理输入，也就是说在开始时并不需要已经知道所有的输入</strong>。与离线算法相比，在线算法的链路更长，涉及到多个上下游模块的配合，对计算性能、抽象能力、数据一致性都提出了更高的要求。提供在线算法服务的过程中，需要和工程团队紧密配合，有机会感受到算法和工程在思维模式、能力栈之间的差异，找到算法和工程的最优平衡点，是一个项目能否成功的关键因素，而<strong>感受两种思维方式的碰撞，对算法工程师的工程能力和架构能力的成长大有助益</strong>。在线算法的另一挑战来自线上线下效果不一致的问题，离线AUC提升爆表，一上实验正向寥寥，一曲凉凉送给自己。在线算法牵涉的链路过长，排查起来异常费力，十分考验算法工程师的业务理解能力和问题Debug能力，对于从实验室的空中楼阁步入工业界的钢筋水泥的应届生来说，在线算法是一个能让你快速进入状态的领域。</p><p>最后，祝大家在泡沫中玩得愉快。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新近组了个饭局，发现来的各大厂的算法leader，都一副萎靡不振的模样，一问，都忙着筛秋招的简历呢，今年这秋招，投算法的像雪片一样飞过来，大抵高校计算机类的导师，都纷纷转型深度学习了，而候选人也个个刷过比赛，不拿到前几名都不好意思说出来，算法原理更是倒背如流。于是算法岗的面试官都是筛简历筛到老眼昏花，&lt;em&gt;来左边儿一起画个顶会，在你右边再画个Kaggle&lt;/em&gt;，繁重的业务之外，面试更是一场接一场，面人面得头痛欲裂。&lt;/p&gt;
&lt;p&gt;有人说，这是算法岗的泡沫，一触即破，好比回溯几年前的客户端开发，随便上个培训班就可以收割offer了，等风潮一过铁定凉凉。&lt;/p&gt;
&lt;p&gt;面对层出不穷的劝退帖，我嘿然一笑，短期泡沫肯定是存在的，但是放长到十年维度的时间来看，投算法岗有没有问题？我觉得依然是应届生较好的一个选择，理由有三。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>才华有限公司</title>
    <link href="http://guoze.me/talent-limited-company.html"/>
    <id>http://guoze.me/talent-limited-company.html</id>
    <published>2019-09-26T08:08:54.000Z</published>
    <updated>2019-09-26T09:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>朋友们，不好意思，来晚了。</p><p>自恋如我，也不愿意去猜测这断更的半年里，会有多少粉丝惦记着这个僵尸公众号。</p><p>不惦记的留言区麻烦举个手。</p><p>于是我就换了张皮变了个脸再出来，就权当做个实验不是。</p><p>断更的半年里，时不时会有一个念想冒上心头：<strong>写作，对于我的意义究竟是什么？</strong></p><p>好比跟教练健身之后，我常问自己：跑步，对于我的意义究竟是什么？想减脂塑形，它是再低效不过的锻炼方式。所以我就不再跑了。</p><span id="more"></span><p>不对，所以我又开始跑了。跑步，好比是一种来自外间的校正，好比是马不停蹄的沙漏，我要到马路上张牙舞爪，大口大口呼吸天地之灵气。</p><p>王信文说，他写公众号就是为了爽，好的，我也是。</p><p>作为一个凡庸的人，最爱的不过就是<strong>立Flag</strong>，会自然或者不自然的臆想：到达一个什么样的状态就可以自由自在做喜欢的事情了。真相是这样的状态永远不会到达，徒劳长出焦虑的刺，一顶一顶让自己难受。</p><p>有次饭局喝大了，对着一帮兄弟直言：我们这帮过气学霸，最笨的就是老以为智力出众就了不起，其实挨个数下来，没有奇遇加持，我们不过都是才华有限公司。</p><p>虽说凭着些微的智力，即便不是特别努力，也可以从工作岗位得到中上的回报，然而离真正的出色，还有一千光年的遥远。</p><p>另一次见亦师亦友的W君，又被狠狠批了一顿，直指做事没抓重点，整天像八爪鱼样样都想拿，只能是样样都做不好。</p><p>也对，一个人要有所成就，智力仅仅能作为最底层的存在，再往上是勤奋，再往上是坚持，再往上就是看似无关紧要的问题了：<strong>你想要什么？你做什么最快乐？你愿意为了得到什么而舍弃其他？你的原则和底线是什么？</strong></p><p>公司即将被收购的X君，当时一起共事泯然众人，但是无论哪次饭局，间隙总是捧着手机专注的玩游戏，让人既哀叹又羡慕。</p><p>于是当你一层一层艰难爬升之时，智力或者说理智又会反而又会成为阻碍你继续成长的最大因素。</p><p>因为理智，所以疏离。</p><p>因为理智，所以计较得失。</p><p>因为理智，所以容易盯着月亮的影子。</p><p>这大概就是张一鸣为什么强调年轻人要为不确定性保持乐观的原因，也是佛家口中的所知障。</p><p>我刚毕业那时，老板M君也算江湖上赫赫有名的连续创业者，一次长谈怎么招人，他直言学历、经验、聪明都不重要，我反问：那什么重要？</p><p>M君回道：<strong>有热情最重要</strong>。</p><p>那时我茫然不懂，现在回头，闪过共事过交往过的许多面庞，留下那些有趣、靠谱还能对所做的事情有满满热情的人儿，寥寥可数而已。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;朋友们，不好意思，来晚了。&lt;/p&gt;
&lt;p&gt;自恋如我，也不愿意去猜测这断更的半年里，会有多少粉丝惦记着这个僵尸公众号。&lt;/p&gt;
&lt;p&gt;不惦记的留言区麻烦举个手。&lt;/p&gt;
&lt;p&gt;于是我就换了张皮变了个脸再出来，就权当做个实验不是。&lt;/p&gt;
&lt;p&gt;断更的半年里，时不时会有一个念想冒上心头：&lt;strong&gt;写作，对于我的意义究竟是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好比跟教练健身之后，我常问自己：跑步，对于我的意义究竟是什么？想减脂塑形，它是再低效不过的锻炼方式。所以我就不再跑了。&lt;/p&gt;</summary>
    
    
    
    <category term="梦中语" scheme="http://guoze.me/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>热情如火的冬天</title>
    <link href="http://guoze.me/hot-winter.html"/>
    <id>http://guoze.me/hot-winter.html</id>
    <published>2019-09-26T08:04:03.000Z</published>
    <updated>2019-09-26T09:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>南方的冬天是让人最捉摸不透的季节，放佛前一天还身着短袖张牙舞爪，一夜就由夏入冬，走在街上也忍不住要缩一缩脖子。</p><p>这正像极了今年的行景，年初大家还在热炒区块链和人工智能，资本制造了泡沫，泡沫鼓舞了人心，下一个科技纪元拉开了大幕，转眼年末大家就都在纷纷担心着裁员和倒闭的消息了。</p><p>这个年终和各路好友吃饭，无论哪家公司哪个地区哪种级别，不约而同对明年上半年的形势都有更差的预期。</p><p>至于那些一直跃跃欲试嚷着要创业的小伙伴，也像街上缩脖子的行人一样，开始想着如何稳固在大公司的位置了。</p><p>冬天真不好过。</p><span id="more"></span><p>冬天是单调的，哪怕是西湖边残雪的断桥，对我的诱惑力也不如春日暖阳，骑着单车从苏堤疾驰而下，穿越一片柳絮飞舞。</p><p>冬天是乏味的，哪怕是绿蚁焙新酒，红泥小火炉，对我的诱惑力也不如夏天夜晚，呼朋唤友去喝冰镇的啤酒，吃热闹的烤串。</p><p>春生夏长，秋收冬藏。大概只有养生系的中年人才会真正喜欢冬天。</p><p>但是，一年有春有夏就必定有冬，一个人有起就有落，一个行业有荣就有衰。</p><p>冬天与死亡类似，都是大自然最好的发明，万里冰封之时，它完成了代际的更替，让更适应环境活力更旺盛的个体延续下去，淘汰掉不合时宜的阻生牙。</p><p>寒冬来临，潮水褪去，冻死的只是那些裸泳的人。</p><p>对于有能力的人来说，冬天永远不是坏天气，他们忙碌于创造着什么，无暇顾及冬天的来临。也许冬天挤掉了泡沫，挤掉了名不副实的人，挤掉了心猿意马的诱惑，是一个更适合沉淀的时节。</p><p>一个人在冬天做出的选择，要远远比他在春天或秋天做出的选择重要得多。</p><p>是自怨自艾，还是奋力向前；是畏缩逡巡，还是一鼓作气；是悲观失落，还是积极求变。</p><p>某次饭局一位年长的朋友L君说得特别好：不管好时候坏时候，顶尖的人顶尖的公司总是不怕赚不到钱的，反而坏时候是更好的赚钱时机。</p><p>我想，如果我们还不够顶尖，也不在最顶尖的公司，那么至少趁着冬天让自己离顶尖更近。</p><p>只是，永远不要抱怨碰不上好的时机，永远不要懊悔没有趁着春天和夏天去种下一棵树。</p><p>种一棵树最好的时间是十年前，而后是现在。冬天种的树，能活下来的必定更加健壮。</p><p>我宁愿拥抱这热情如火的冬天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;南方的冬天是让人最捉摸不透的季节，放佛前一天还身着短袖张牙舞爪，一夜就由夏入冬，走在街上也忍不住要缩一缩脖子。&lt;/p&gt;
&lt;p&gt;这正像极了今年的行景，年初大家还在热炒区块链和人工智能，资本制造了泡沫，泡沫鼓舞了人心，下一个科技纪元拉开了大幕，转眼年末大家就都在纷纷担心着裁员和倒闭的消息了。&lt;/p&gt;
&lt;p&gt;这个年终和各路好友吃饭，无论哪家公司哪个地区哪种级别，不约而同对明年上半年的形势都有更差的预期。&lt;/p&gt;
&lt;p&gt;至于那些一直跃跃欲试嚷着要创业的小伙伴，也像街上缩脖子的行人一样，开始想着如何稳固在大公司的位置了。&lt;/p&gt;
&lt;p&gt;冬天真不好过。&lt;/p&gt;</summary>
    
    
    
    <category term="梦中语" scheme="http://guoze.me/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>那个百无一用的技术主管</title>
    <link href="http://guoze.me/tech-leader.html"/>
    <id>http://guoze.me/tech-leader.html</id>
    <published>2019-09-26T08:02:14.000Z</published>
    <updated>2019-09-26T09:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一个朋友刚结束了短暂的空降技术主管的生涯，饭局中忍不住吐槽：我几乎做到了老板要求我的一切，为什么下属们仍然认为我百无一用？我笑了笑，说这一点都不出奇，我刚毕业那阵儿，也常常觉得自己的主管百无一用。而我现在全力以赴的，也仅仅是避免成为一个百无一用的技术主管而已。</p><p>先讲个故事。</p><blockquote><p>一群猴子在爬树，越是爬得高爬得快的猴子，它的红屁股就会被下面越多的猴子所看见，也就更容易被其他猴子所嘲笑，但是所有的猴子屁股都是红的，其他猴子不被嘲笑，只是因为爬得慢屁股没有机会被看见而已。管理学把这个归纳为「红屁股效应」。</p></blockquote><span id="more"></span><p>管理者身在聚光灯下，红屁股自然是分外耀眼。尤其是技术这门<code>Talk is cheap / Show me the code</code>的手艺，觉得头儿技术能力不如自己的，恐怕不在少数，手艺不如人，威望就更加难以建立。</p><p>有人说：那我即便当了技术主管，也继续死磕手艺，代码量遥遥领先，这总镇得住了吧？</p><p>来来往往见过这么多的技术主管，也仅有一位采取了这种策略，落地还算成功的，但也只能在5个人以下的小团队维持。</p><p>团队一旦扩张，必然要分出大量的时间用于业务的梳理、团队的管理以及内外部的沟通，从而使管理者贡献代码的专注力下降，这也是为什么被选出的技术管理者往往是更有技术潜力的大咖，而管理干久了手艺的红屁股就露出来了的原因。</p><p>不只一个人问过我一个有意思的问题：<strong>作为技术主管，安排多大比例的时间写代码合适？</strong></p><p>我的回答和普遍的观点反着来：<strong>战争时代（项目紧急或者复杂）尽量少写，和平时代（项目不紧急或者稳定）尽量多写</strong>。</p><p>项目紧急或者复杂，就意味着项目之中存在大量有待梳理与优化的点，意味着技术主管要投入更多的时间去整合资源、精简需求和迭代方案，个体的代码贡献与整体的效能提升相比，就显得没那么重要了。反而到了项目的稳定期，作为技术攻坚的带头人，引入业界前沿的技术、算法或者框架，让战争时代<em>Quick And Dirty</em>的方式和<em>不得不</em>情况下做出的妥协变得优雅又牢固，持续深挖团队的技术护城河，营造团队以精进技术为导向的氛围，培养各个方向顶尖的技术梯队，本来就是技术主管在和平年代最重要的使命。</p><p>遇上和我一样爱偷懒的同学，追问就紧跟而来：<strong>如果一直是战争时代，是不是技术主管就可以一直少写代码甚至不写代码？</strong></p><p>许多人的心中，技术的精进自古华山一条道，只有写代码。无可否认只有翻越每一处技术的险境，完成一个功能或者模块的上线，才能深入了解技术细节的方方面面。然而，对于技术主管，这显然不是最高效的精进技术的方式。<strong>最高效的学习方法，永远是通过别人学习</strong>。现今早就不是史玉柱一箱泡面闷出汉卡的时代了，不管是Review下属的代码，阅读顶会的Paper或者谷歌等巨头公司公布的技术方案，还是面对面扣细节的讨论一个技术方案，对于个人技术提升的帮助都要比闷头写代码价值要大。成为技术主管，意味着拥有了更宽广的技术触角，从只了解单一模块的技术细节，到需要了解上下游所有模块的关键技术细节。无论战争时代还是和平时代，技术的修行都至关重要，只是技术修行远不只写代码。</p><p>当然，这个问题还隐含着另一层意思：<strong>技术主管是不是可以不是团队之中技术最强的那个人？</strong>对于这类送命题，我心里早有防范。</p><p>回答之前，容我先卖个关子，我时常推荐一本十分实用质朴的小册子，给新晋技术主管的朋友，书名叫<code>10人以下小团队管理手册</code>，书中鲜明的提出一个观点：<strong>工作最拼的人不适合当主管！</strong>（至于为什么，请亲自到书中找答案）那么与之相对的是不是：<strong>技术最强的人不适合当主管？</strong></p><p>这就要具体问题具体分析了。一提起<code>技术最强</code>的定义就够让人头疼了：是指技术的深度，还是指技术的广度？是能快速给出合格的技术选型，还是能快速整合最优技术选型的资源？是能给出效果最优的技术方案，还是给出成本最低产出最快的方案？是能写出整洁可维护、高效不粘人的代码，还是能一眼瞄过别人的代码，毫不费力指出关键优化点？我想每个技术人的答案都不一样，甚至每个业务根据所处的阶段，所需的技术主管类型也不一样。</p><p>至少有一点我是肯定的：<strong>技术主管（不是技术总监）需要具备对项目执行的技术方案进行细节粒度把关的能力</strong>，技术主管不一定具备某项单点技术上团队最强的实力，却必须有团队最为宽广的技术视野。比如负责推荐的技术主管不一定精通各种排序算法，但他（她）对排序、召回、离线、近线等一系列模块的理解程度将直接决定了推荐的最终效果好坏。</p><p>洋洋洒洒一大堆，好多人怕还是弄不明白技术主管究竟有什么用处，以我浅薄的理解，技术主管也是个兵，主要角色有这么三种，列举如下。</p><ol><li><strong>指导员</strong>。这种指导既可以是技术上的，也可以是业务上的。以实际场景为例：「喂 小王，KDD那篇阿里讲排序的论文你读过了没？我昨晚抽空看了下，对我们X系统的实用价值很大，你赶紧读一下，下午我们来讨论」「喂 小李，Y系统的近线模块内部知识平台有篇文章刚发出来，整体的设计与我们的需求特别匹配，快快调研一下」「喂 小张，你这个预测任务，我建议可以添加Z指标作为附加的标签，利用多目标学习提升性能，我周末跑了一版，性能有比较明显的提升，你可以继续跟进」，简直絮絮叨叨像个居委会大妈。遇上紧急情况，还可以抢过一把油腻的机械键盘来，啪啪啪，打个十环的靶。</li><li><strong>政委</strong>。上至团队的使命传达（我信奉透明的工作方式，只要不是机密的，都应该向团队成员敞开），到个人技术成长或职业发展的困惑答疑，到考核晋升的结果同步，下至找不到女朋友的心理按摩，都是政委的分内事。没事谈谈心吃吃饭搞搞娱乐活动，谁会愿意和自己不喜欢的人工作呢？微软的纳德拉说过，<strong>文化是一家公司最重要的事情</strong>，那么小到一个团队，<strong>氛围就是最重要的事情</strong>。氛围搞好了，信任就起来了，大家能团结起来投入战斗，其他都是水到渠成。</li><li><strong>参谋官</strong>。某公司内部划分了<code>TL</code>（Tech Lead）和<code>PL</code>（Project Lead）两条线，参谋官可以兼而有之，一个项目采取什么架构，哪些部分是第一期就必须上的功能，哪些部分可以降级，哪些部分可以用第三方的服务；产品需求的轻重缓急如何，哪些需求该马上做，哪些需求还得等外部资源到位，哪些需求产品经理还想不清楚得打回去，哪些困难得提前告知让合作方有心理预期。这些都是战场上生死存亡的大事，既要求参谋官的技术能力到位了，宏观的思考和认识也少不了。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一个朋友刚结束了短暂的空降技术主管的生涯，饭局中忍不住吐槽：我几乎做到了老板要求我的一切，为什么下属们仍然认为我百无一用？我笑了笑，说这一点都不出奇，我刚毕业那阵儿，也常常觉得自己的主管百无一用。而我现在全力以赴的，也仅仅是避免成为一个百无一用的技术主管而已。&lt;/p&gt;
&lt;p&gt;先讲个故事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一群猴子在爬树，越是爬得高爬得快的猴子，它的红屁股就会被下面越多的猴子所看见，也就更容易被其他猴子所嘲笑，但是所有的猴子屁股都是红的，其他猴子不被嘲笑，只是因为爬得慢屁股没有机会被看见而已。管理学把这个归纳为「红屁股效应」。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
  </entry>
  
  <entry>
    <title>数据科学行业未来的几点预测</title>
    <link href="http://guoze.me/data-science-future.html"/>
    <id>http://guoze.me/data-science-future.html</id>
    <published>2019-09-26T08:00:29.000Z</published>
    <updated>2019-09-26T09:56:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>中国人对抽象的科学、抽象的哲学，毫无兴趣可言，因为心灵与情感，是中国人的长处。 - 辜鸿铭「中国人的精神」</p></blockquote><p>微信某位创始员工，多年前曾在他的公众号分享到，相比于Facebook的数据驱动，微信更像一个思考驱动的团队。我当时脑中浮想起的，就是上面辜鸿铭的这句话。</p><p>我一直认为，东亚的儒家文化，是一种典型的大国文化，大国文化就是容纳灰度的文化，像儒家文化的基石 - 「仁义礼智信」之中就包容了许多「运用之妙，存乎一心」的准则，相比于能发明出丰田精益生产与匠人精神的岛国文化，容纳了更多的灰度，而更多的灰度就意味着面对不确定性时更加稳健，拥有更长的生命力以及更高的发展上限。前阵朋友圈刷屏的文章：<a href="https://mp.weixin.qq.com/s/6nq0odDY6tjXhOyPRMlzXQ">任正非和马化腾的灰度：普通人追求安全感，高手拥抱不确定性</a>也提到了这点。</p><p>这种容纳灰度的文化特质投射到互联网行业，尤其是移动互联网行业刚起步的那几年，我们可以看到风口的飞猪、看到大力出奇迹、看到天下武功唯快不破、看到看似不合理的商业模式通过规模效应和病毒传播大获成功。</p><span id="more"></span><p>然而黄金时代就像一列飞驰的列车这么过去了，增量市场正在慢慢演变为存量市场。存量市场有两个特点：一是增长点一去不复返，大家都必须从存量用户之上做文章；二是快速增长的用户包含了各类人群，这对产品所提供的内容和服务都提出了更精细化的个性化需求。</p><p>可以预见的是，<strong>提高效率</strong>、<strong>细分品类</strong>和<strong>打磨细节</strong>都会是未来相当长时间内，互联网巨头们针对存量市场的主流策略。</p><p>与之相印证的，2018年全国移动互联网活跃用户增长率只有<strong>4.2%<strong>，同期的数据中心数据量增长率却达到了</strong>49%<strong>。可以预见的趋势是，哪怕是互联网人口红利是一个过去式的名词，</strong>互联网数据红利</strong>却仍然会维持5到10年，甚至更久。</p><p>这就给数据科学家提供了一个持续增长的舞台。</p><p>虽然从亚马逊提出协同过滤的算法开始，已经过去了整整20年，推荐系统的方法日臻成熟，但是新的算法仍然层出不穷，不管是<code>Embedding</code>还是<code>DL</code>相关的主题，还是新的算法与传统算法的联合，都是现在业界顶会趋之若鹜的话题。</p><p>相比于搜索行业的下行，推荐系统从产品之中可有可无的模块，到普遍认可的能提高信息分发效率的模块，再到头条和快手这类以推荐系统能力（或者说&#x3D;&#x3D;数据中台能力&#x3D;&#x3D;）为基石的独角兽的出现，<strong>时代迁移的背后，是获取和制造信息的成本越来越低，是处理海量数据的效率越来越高，是用户面对海量信息越来越懒惰与无所适从</strong>。</p><p>阿里某核心部门负责算法的好友，刚升了P9，一次闲聊中说起头条对中国的互联网圈有两个重要贡献，一是抬高了数据科学家的身价，二是<strong>使得个性化推荐成为被所有企业接受的信息分发的最佳方式</strong>。深以为然。</p><p>纵览数据科学行业的发展，算法的迭代更新只是其中很小的一个部分，更重要的摩尔定律让我们拥有了更快的CPU、更大的内存、硬盘和带宽以及更凶猛的GPU，更重要的是工程技术的发展让我们拥有了分布式的文件系统和数据处理能力甚至流式计算的能力，正是这两者的共同作用之下，我们一方面得以整合更多对预测用户点击概率有帮助但是单独使用效用并不显著的特征，一方面得以进入深度神经网络构造特征取代人工交叉特征的时代，从而涓涓溪流汇入大海，性能提升一日千里。</p><p>那么具体到个人而言，面临这个<strong>数据工具越发强大、数据中台越发膨胀、算法开源越发完善的时代</strong>，是否可以驱动海量数据去解决一个未知的难题，非常考验数据科学家的落地实现能力，这相对于是否熟读顶会发表的新算法，重要性要大得多得多。它的重要性仍然会在未来得到放大。</p><p>与此同时，<strong>在线处理数据、在线数据汇入模型重新训练、在线根据上下文调整排序</strong>，将变得越来越常见，甚至变得标配。所以数据科学家必须具备基础的后台开发知识。</p><p>另一个预判，是<strong>数据会逆云而行，逐步割裂在各个或大或小的体系之中</strong>。相对于搜索引擎时代的一爬了事，企业经营者已经被普及了数据所能带来的巨大价值，也就更加注重数据的安全。它所带来的影响，是应用层的算法越来越难通用化（与之相印证的是，数年间出现的以搭建推荐引擎为卖点的企业服务，纷纷转型或者倒闭）。那么对于数据科学家而言，是否熟悉所负责的产品或业务，将变得越来越重要，也更加考验数据科学家沟通、表达和连接的能力。</p><p>最后一个预判，是<strong>数据驱动的产品开发和运营流程会被广泛接受</strong>。思考驱动的时代落下帷幕，数据与思考并行驱动的时代已经到来。这意味着不管是做产品、做运营还是做算法，会看数据、会做实验、会大胆假设小心求证，都是新时代不可或缺的能力栈。</p><p>以上。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;中国人对抽象的科学、抽象的哲学，毫无兴趣可言，因为心灵与情感，是中国人的长处。 - 辜鸿铭「中国人的精神」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信某位创始员工，多年前曾在他的公众号分享到，相比于Facebook的数据驱动，微信更像一个思考驱动的团队。我当时脑中浮想起的，就是上面辜鸿铭的这句话。&lt;/p&gt;
&lt;p&gt;我一直认为，东亚的儒家文化，是一种典型的大国文化，大国文化就是容纳灰度的文化，像儒家文化的基石 - 「仁义礼智信」之中就包容了许多「运用之妙，存乎一心」的准则，相比于能发明出丰田精益生产与匠人精神的岛国文化，容纳了更多的灰度，而更多的灰度就意味着面对不确定性时更加稳健，拥有更长的生命力以及更高的发展上限。前阵朋友圈刷屏的文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/6nq0odDY6tjXhOyPRMlzXQ&quot;&gt;任正非和马化腾的灰度：普通人追求安全感，高手拥抱不确定性&lt;/a&gt;也提到了这点。&lt;/p&gt;
&lt;p&gt;这种容纳灰度的文化特质投射到互联网行业，尤其是移动互联网行业刚起步的那几年，我们可以看到风口的飞猪、看到大力出奇迹、看到天下武功唯快不破、看到看似不合理的商业模式通过规模效应和病毒传播大获成功。&lt;/p&gt;</summary>
    
    
    
    <category term="数据控" scheme="http://guoze.me/categories/data/"/>
    
    
  </entry>
  
  <entry>
    <title>喝一桶摩拜的毒鸡汤，你也不会有15亿</title>
    <link href="http://guoze.me/poisonous-chicken-soup.html"/>
    <id>http://guoze.me/poisonous-chicken-soup.html</id>
    <published>2018-04-08T02:03:52.000Z</published>
    <updated>2023-01-02T03:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>4月3日晚，继阿里以90亿美金全资收购饿了么之后，另一家独角兽摩拜单车也被美团收入囊中，互联网由春秋以闪电般的速度奔向了战国，合纵连横的游戏越玩越<strong>666</strong>，眼见只剩齐国和秦国两强，余下的小邦国都得择良木而栖了。本来想由此引申开去，写一篇对互联网大趋势的看法，然而静观清明假期外网的热点，发现节奏已全然被下面这两篇刷屏的毒鸡汤带偏。</p><ul><li><a href="https://mp.weixin.qq.com/s/lmDmXBrd1yVWoV8FF8wYJA">摩拜创始人套现15亿：你的同龄人，正在抛弃你</a></li><li><a href="https://mp.weixin.qq.com/s/Lq8xU7tHbpWWhHqggWHqNw">套现15亿现金后，摩拜80后创始人留下2条人生潜规则</a></li></ul><p>抓住一个热点新闻，向着公众号阅读和传播主体的八零后九零后开炮，包装一个精妙绝伦却耸人听闻的标题，数落了你们还得让你们心甘情愿为它点赞为它转发。<strong>贩卖焦虑</strong>真是一门好生意，真·一本万利。</p><blockquote><p>亲，你们被抛弃了呀，要不要来我们这报节课追上时代的脚步呢？现在打折只要99哦！</p></blockquote><p>广告一开，智商税如雪花般飘来。你们的良心就不会痛吗？</p><span id="more"></span><h1 id="好孩子情结"><a href="#好孩子情结" class="headerlink" title="好孩子情结"></a>好孩子情结</h1><p>看这个煽动力十足的标题：你的同龄人，正在抛弃你。</p><p>说得就像是你第一回被同龄人抛弃一样。</p><p>高中那时我们有个学霸同学，成绩又好人又长得精神，综合能力尤为生猛，当选了学生会主席，每回学校开大会都要致开场白，座下女生纷纷抛去迷妹的眼神，最后还找了我们的校花当女朋友，第一次教会了我们<em>人生赢家</em>这个词汇。</p><p>后来我们一众屌丝聚会时总是恨得牙痒痒：<em>要早点下手追校花，说不定也有机会了呢</em>。</p><p><img src="/images/WX20180407-155407@2x.png" alt="WX20180407-155407@2x"></p><p>所以，被同龄人抛弃又是什么新鲜事吗？还未成年，人与人之间的差距就被拉开了。他在台上，我在台下；他光芒万丈，我心灰意冷；他校花在手，我单身一狗。还是不变的配方，还是熟悉的味道。</p><p>我们这代人，是成长于<strong>别人家孩子</strong>这一恶劣环境下的一代，是有浓厚的<strong>好孩子情结</strong>的一代，我们渴望变得优秀，渴望受到赞赏，渴望能站在台上光芒万丈，因此不惜屈从于外界对我们的评价。</p><blockquote><p>你们要争独立，不要争自由。你们要争自由，自由是针对外面束缚而言的，独立是你们自己的事，给你们自由而不独立，仍是奴隶。独立要不盲从，不受欺骗，不依赖门户，不依赖别人，这就是独立的精神。 – 胡适</p></blockquote><p>一百年过去了，独立仍然不是一件容易的事情。</p><p>许多人点开毒鸡汤时的心态，和我们一众屌丝错过校花的懊悔与穷酸并无不同。</p><p>许多人看胡玮炜的角度，也与高中那年站在台下的我并无不同。</p><p>许多人穷其一生，不过想做一个别人眼中的<strong>好孩子</strong>，而不是具备独立思考能力哪怕一事无成的<strong>大写的人</strong>。</p><h1 id="慢半拍"><a href="#慢半拍" class="headerlink" title="慢半拍"></a>慢半拍</h1><p>不独立的人永远慢半拍。</p><p>公务员火热的时候，一窝蜂去考公务员；外企火热的时候，一窝蜂去面试外企；互联网火热的时候，一窝蜂瞎折腾互联网。</p><p>殊不知现在互联网发生大变革的概率，已经降到忽略不计了。万花丛中杀出一个胡玮炜，身下是九千九百九十九个落叶无声的失败者的尸体。</p><p><strong>夏洛特烦恼</strong>之中的情节就是这种意淫的极致，当夏洛穿越回一九九七年，靠着复制各路歌手的歌曲爆红，写实了多少观众的春梦。</p><p><img src="/images/WX20180407-153959@2x.png" alt="WX20180407-153959@2x"></p><p>先梦回2010年买上一万个比特币，再梦回2013年买上几十手腾讯，哦，对了，还得梦回2009年买上几套北上广深中心区的房产。</p><p>然后毒鸡汤们一本正经的向你宣扬，看吧，选择比努力重要。</p><p>你当这是写科幻小说呢。</p><p>毒鸡汤没有告诉你的是：</p><ol><li><strong>选择了不努力同样等于零</strong></li><li><strong>选择某种意义上也是努力带来的副产品</strong></li><li><strong>所有惊人的奖赏都是时间的朋友</strong></li></ol><p>以至于有些对盲目轻信毒鸡汤的小朋友，连续辗转于不同行业的多个公司之间，而不是用心积累自己的能力与眼界，最终落得个一事无成。</p><p>何况，快速变化的时代，企图从过往的经验之中总结出下一个成功的实现路径，基本是扯淡。</p><h1 id="边缘颠覆"><a href="#边缘颠覆" class="headerlink" title="边缘颠覆"></a>边缘颠覆</h1><p>近几年和老同学聚会，发现了一个奇怪的现象：世俗意义最成功的那些人，往往并不是当年考上清北复交浙的学霸们，反而是那些高考失意上了个籍籍无名野鸡大学的，靠在华强北倒卖手机、往欧美出口指尖陀螺、挖矿炒币的，这些主流视线之外的，赚到了难以想象的第一桶金。</p><p><img src="/images/WX20180407-160949@2x.png" alt="WX20180407-160949@2x"></p><p>当然，过几年再聚会，也许又会有不起眼的人冒出来。</p><p>当我们羡慕同龄人的财富时，可曾想到他们未发迹之前，顶着冷眼去兜售手机、英语说不好被老外嘲笑、炒币亏得只能顿顿吃泡面？</p><p>而且，所有的身边人都不会理解你，因为你被处在主流视线之外。</p><p>如果是你，是否愿意承担这种艰辛和孤独？甚至99%的平行时空之中，你的艰辛和孤独，并不会换回任何的奖赏。艰辛和孤独之外，还有不确定性的风险。</p><p><strong>超额回报 &#x3D; 时间 * 风险的平方</strong></p><p>但是，这个时代的新机遇，必然是处在主流视线之外的。盯着聚光灯下的胡玮炜，没有任何意义。</p><h1 id="尾巴很长的小结"><a href="#尾巴很长的小结" class="headerlink" title="尾巴很长的小结"></a>尾巴很长的小结</h1><p>古龙笔下的风四娘，<em>骑最快的马，爬最高的山，吃最辣的菜，喝最烈的酒，玩最利的刀，杀最狠的人</em>。</p><p>年少时读到这段，没料到古大侠把对人世极致的追逐如此漫不经心的带出来，只觉得莫名痛快。</p><p>而现在这些没有良心的自媒体，变着法子让我们臆想<em>住最大的房子，赚最多的钱，娶校花为妻，傲笑同学会</em>。一碗毒鸡汤入肚，除了焦虑还剩下什么？</p><p>好端端一个长假，本来该是家人欢聚和独处沉思的好时机，却用来灌毒鸡汤，让自己的心别人的心都不得安宁。</p><p>与其羡慕天边的胡玮炜，不如沉下心，想想自己手头的学习和工作，怎么才能做得更好；想想未来三到五年的时间里，持续做哪些事情会有超额的回报；更重要的是，想想对自己而言，什么样才是幸福的人生。</p><p><strong>幸福，无非是求仁得仁。知道What，How才有意义。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;4月3日晚，继阿里以90亿美金全资收购饿了么之后，另一家独角兽摩拜单车也被美团收入囊中，互联网由春秋以闪电般的速度奔向了战国，合纵连横的游戏越玩越&lt;strong&gt;666&lt;/strong&gt;，眼见只剩齐国和秦国两强，余下的小邦国都得择良木而栖了。本来想由此引申开去，写一篇对互联网大趋势的看法，然而静观清明假期外网的热点，发现节奏已全然被下面这两篇刷屏的毒鸡汤带偏。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/lmDmXBrd1yVWoV8FF8wYJA&quot;&gt;摩拜创始人套现15亿：你的同龄人，正在抛弃你&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Lq8xU7tHbpWWhHqggWHqNw&quot;&gt;套现15亿现金后，摩拜80后创始人留下2条人生潜规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抓住一个热点新闻，向着公众号阅读和传播主体的八零后九零后开炮，包装一个精妙绝伦却耸人听闻的标题，数落了你们还得让你们心甘情愿为它点赞为它转发。&lt;strong&gt;贩卖焦虑&lt;/strong&gt;真是一门好生意，真·一本万利。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亲，你们被抛弃了呀，要不要来我们这报节课追上时代的脚步呢？现在打折只要99哦！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;广告一开，智商税如雪花般飘来。你们的良心就不会痛吗？&lt;/p&gt;</summary>
    
    
    
    <category term="梦中语" scheme="http://guoze.me/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>【长文翻译】EOS Dawn 3.0上线，可支持百万吞吐量</title>
    <link href="http://guoze.me/eosio-dawn-3-0-now-available.html"/>
    <id>http://guoze.me/eosio-dawn-3-0-now-available.html</id>
    <published>2018-04-06T15:01:22.000Z</published>
    <updated>2023-01-02T03:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午，BM在Medium宣布EOSIO Dawn 3.0正式发布，以下是2shou新鲜翻译的中文版。</p><p><strong>本文共6515字，阅读约需20分钟</strong></p><span id="more"></span><h2 id="EOSIO-Dawn-3-0现已发布"><a href="#EOSIO-Dawn-3-0现已发布" class="headerlink" title="EOSIO Dawn 3.0现已发布"></a>EOSIO Dawn 3.0现已发布</h2><p>Block.one很高兴为大家推荐EOSIO Dawn 3.0第一个功能完整的预发布版本。该预发布版本代表了一个的里程碑，为2018年6月即将到来的EOSIO 1.0打下坚实基础。我们的全球开发团队一直在加班加点工作，使得EOSIO成为构建区块链应用程序的最强平台。自从EOSIO Dawn 2.0的发布以来已经有四个月了，有很多新的特性需要展示给大家。</p><p>构建最先进的区块链架构是一个不断迭代的过程，随着不断学习而做出变化。Dawn 3.0中完成的许多功能在最初的EOSIO白皮书中都没有提及，但是在构建高性能、灵活且易于开发的平台的过程中我们发现了这些新的需求。</p><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>可扩展性意味着满足后续市场需求的扩展能力。我们的团队在每一步都将可扩展性融入到设计之中。也就是说，Dawn 3.0只实现了一小部分潜在的优化，使得EOSIO仍然有持续扩展的空间。EOSIO的设计将使得利用并行计算来提升吞吐量变得可行，而不需要做出硬件更改。</p><h2 id="跨链通信"><a href="#跨链通信" class="headerlink" title="跨链通信"></a>跨链通信</h2><p>跨链通信是终极的可扩展性功能 - 我们的圣杯，就像业界一直在寻找的诸如侧链，Plasma和分片等方案。跨链通信使得一个区块链网络能够以可证实的安全方式，验证另一个区块链网络的事件真实性。它的目标是让跨链通信像智能合约之间的链内沟通一样安全，而我们已经实现了这一目标。</p><p>从我们的角度，跨链通信只不过是实现轻客户端作为智能合约的功能。轻客户端可以验证区块链中的交易，而无需处理整个区块链。这反过来意味着需要建立一个有效而安全的轻客户端可验证的权益证明区块链网络。因此，轻客户端的验证必须纳入到最开始的协议设计之中，因为发布之后就很难再加进来。</p><h2 id="稀疏区块头验证"><a href="#稀疏区块头验证" class="headerlink" title="稀疏区块头验证"></a>稀疏区块头验证</h2><p>传统的轻客户端需要下载所有区块头，然后基于这些区块头验证交易。现在EOSIO每秒生成两个区块，区块链每秒至少需要2个处理每个区块头的过程。这无法扩展到相对罕见的跨链通信的情况。为了解决这个问题，我们创造了第一个稀疏区块头验证的具备拜占庭容错能力的区块链。具体而言，只有控制超过2&#x2F;3的区块生产者（比如，21个中的15个以上），轻客户端才有可能被欺骗。其他情况下，轻客户端只需处理活跃的区块生产者更改的区块头，以及包含了相对跨链通信的区块头。</p><h2 id="上下文无关操作"><a href="#上下文无关操作" class="headerlink" title="上下文无关操作"></a>上下文无关操作</h2><p>上下文无关操作是实现高效跨链通信的关键功能之一。它们是可以包含在交易中但不依赖于区块链状态的特殊操作，因此是「上下文无关」的。上下文无关操作的一个例子是验证Merkle证明或签名。由于这些计算是上下文无关的，得以进行并行的简单验证，得以在重放中修剪计算。</p><p>每个上下文无关操作也代表一个可修剪的交易数据分片。这意味着可以修剪大型Merkle树，从而在区块链重放期间节省昂贵的计算。</p><p>上下文无关操作除了使得我们能够并行化跨链通信相关的绝大部分开销，还能够并行化并简化需要大量算力的隐私技术，例如匿名交易、防弹技术（Bulletproofs）和zkSNARK（零知识证明）。</p><p>为了激励使用上下文无关操作，生产者只允许在上下文无关操作发生的时候（而不是传统交易），向用户收取一小部分CPU算力。</p><h2 id="事件型上下文无关内联操作"><a href="#事件型上下文无关内联操作" class="headerlink" title="事件型上下文无关内联操作"></a>事件型上下文无关内联操作</h2><p>EOSIO Dawn 2.0开发者寻找的功能之一是生成由外部来源处理的事件的有效方法。在以太坊，这些事件用于报告关于合同内部运作的结构化信息。通过增加上下文无关操作，我们也有可能做上下文无关的内联操作。内联操作是由合同代码生成并作为当前交易的一部分可执行的操作。一个上下文无关联的行为可以低成本的并行化处理。由于所有内联操作都包含在Merkle根节点中，因此可以将这些操作当做可证明的通知给外部服务和其他区块链网络。</p><h2 id="交易压缩"><a href="#交易压缩" class="headerlink" title="交易压缩"></a>交易压缩</h2><p>有很多交易的数据可被压缩，其中最不可避免的例子是合约当中集成的WebAssembly代码，还有包括ABI规范和与账户&#x2F;合约关联的李嘉图合约，某些应用程序（如社交媒体）可能还希望在区块链中包含可压缩的UGC内容。</p><p>通过利用交易压缩，区块链可以更有效地存储和传输大量交易，也让用户相对于不可压缩数据承担更小的成本。</p><h2 id="解释器和JIT编译"><a href="#解释器和JIT编译" class="headerlink" title="解释器和JIT编译"></a>解释器和JIT编译</h2><p>相对Dawn 2.0，本次最大的变化之一就是WebAssembly运行环境的抽象。Dawn 3.0现在默认采用Binaryen WebAssembly解释器，而不是更快的Just-in-Time（JIT）编译器。这个决定会降低性能，但会增加稳定性和标准的一致性，同时允许我们在有需要时轻松更换更高性能的JIT环境。新的解释器也解决了我们面对Dawn 2.0所面临的最大挑战之一：编译一个智能合约所造成的延时。将来我们可以使用新的解释器来获得一个慢但较低延迟的新部署智能合约的执行过程，当同时在后台编译和优化智能合约。这种双重实现意味着我们所有的单元测试都针对编译和解释代码进行了测试，因此我们可以在部署混合方法之前发现潜在的非确定性或非标准的操作。</p><h2 id="资源测量速率的限制"><a href="#资源测量速率的限制" class="headerlink" title="资源测量速率的限制"></a>资源测量速率的限制</h2><p>随着Dawn 3.0的发布，我们现在有一个全新的资源速率限制系统。也许最大的改变是引入了客观的指令计数算法。当我们着手构建EOSIO时，目标是完全采用主观限速和强制执行。然而我们发现，主观执行的成本几乎与更客观方法相同。所以我们现在采用了混合解决方案，其中用户需要为客观使用而付费，但区块生成者也会在合同中放置主观的挂钟时间限制。这种主观的限制防止了客观计费方式的滥用。</p><p>我们采用这种方法的主要原因之一是允许单个交易执行需要比以前多得多的算力。从理论上讲，现在区块可以包含一个需要100毫秒运行的交易，而在旧模型下，每个交易都必须在1毫秒以内运行。</p><p>限速的另一个变化是将限制与定义代币（Token）的需求区分开。这使得EOSIO可以用在没有使用Token的场景下，比如私有的经过授权的区块链之中使用。公共区块链可以采用系统合约，通过权益（staking）来实现限制。社区可以动态地决定如何分配资源，而与分配的实施方式无关。</p><h2 id="500毫秒出块间隔和BFT-DPOS"><a href="#500毫秒出块间隔和BFT-DPOS" class="headerlink" title="500毫秒出块间隔和BFT DPOS"></a>500毫秒出块间隔和BFT DPOS</h2><p>随着Dawn 3.0的发布，我们已经可以从3秒的出块间隔升级到0.5秒的出块间隔，这大大缩短了确认之前的等待时间。通过与BFT DPOS（DPOS的拜占庭容错能力）结合使用时，交易可在1秒内不可逆转地得到确认。不可逆转确认之前的等待时间对区块链间的通信有重大影响，因为另一个区块链必须等待不可逆转确认之后才能汇聚来自外部区块链的证明。两个都是基于EOSIO的区块链应该能够在3秒内执行往返通信，对比以太坊的类似交流模式需要9分钟，比特币则需要3个多小时。</p><p>BFT DPOS尚未实施，因为它是非硬分叉优化，我们将在发布EOSIO 1.0之前实施BFT DPOS。</p><h2 id="BIOS架构"><a href="#BIOS架构" class="headerlink" title="BIOS架构"></a>BIOS架构</h2><p>BIOS架构是EOSIO Dawn 2.0最大的架构变化之一。在EOSIO Dawn 3.0下，绝大多数区块链的业务逻辑已经进入智能合约，可以由社区动态更新，而不需要硬分叉。一个简单的EOSIO区块链现在是一个单一的生产者、没有任何代币、投票或委托证明。核心区块链代码中唯一实现的是权限系统，它包括创建帐户、部署合同和强制执行资源配额的功能。一切需要区块链授权权益的证明（包括代币、投票、权益和资源分配）现在由基于Web Assembly的系统合同定义。</p><p>借助这种新架构，我们能够将开发重点放在区块链静态的非WebAssembly部分。这些是事关稳定性的最关键部分，也最难升级。在发布EOSIO Dawn 3.0和EOSIO 1.0之间，我们将制定系统合同的最终细节，权益和投票。</p><h2 id="安全功能"><a href="#安全功能" class="headerlink" title="安全功能"></a>安全功能</h2><p>安全对于任何计算系统都至关重要，我们设计EOSIO的初衷是成为市场上最安全的区块链。安全是一个多维的问题，必须考虑到黑客攻击、硬件故障、物理丢失和密码丢失的风险。物理钱包擅长防范黑客入侵，但如果验证失败，可能会将用户锁定在帐户外。此外，物理钱包的纸张备份可能会丢失或被盗。</p><h2 id="安全延迟交易"><a href="#安全延迟交易" class="headerlink" title="安全延迟交易"></a>安全延迟交易</h2><p>EOSIO Dawn 3.0最重要的功能之一是增加了用户可配置的延迟以适应不同的操作。有了这种延迟，交易必须在区块链上广播几个小时或几天，然后才能应用。在这段延迟期间，用户可以重新设置权限更高的帐户，然后取消交易。与其他的区块链相比，这是一个重大的改进，因为其他的区块链那里用户不会知道自己已被黑客入侵，直到对此做任何事情都为时已晚。</p><h2 id="忘记密码恢复"><a href="#忘记密码恢复" class="headerlink" title="忘记密码恢复"></a>忘记密码恢复</h2><p>每个帐户至少有两个权限级别：「所有者」和「活跃者」。所有者的许可级别应该是多重签名脚本的N of M机制，其中所有的N都包含所有者的私钥。任何时候如果活跃者密钥丢失或被盗，所有者权限都可以重置活跃者权限。</p><p>如果您失去了所有者密钥，或者您的多重合作伙伴不合作，则帐户活跃者的权限可以在所有者权限闲置30天后请求重置所有者权限。而原先的所有者权限则有7天时间通过更新活跃者权限来重置这一请求。</p><p>在此模式下，由一个或多个物理钱包控制的帐户所有者权限将可以安全地防止黑客攻击和设备故障。如果该设备是带有指纹或Face ID安全识别的iPhone，则攻击者需要强迫你的多重签名合作伙伴，或者窃取您的手机并获得指纹或脸部特征。理想情况下，您的多重签名合作伙伴也正在使用生物识别安全硬件设备。</p><h2 id="交易提案系统"><a href="#交易提案系统" class="headerlink" title="交易提案系统"></a>交易提案系统</h2><p>用户可以在自己的时间独立添加和删除权限，而不必在传统交易时间窗口内收集所有签名，这使得多重签名更加容易。通过提案系统，任何人都可以提出交易，交易涉及的各方可以简单地批准。在添加您的批准和获得必要的门槛之间，您可以随时取消您的批准。</p><p>为了实现这个系统，我们添加了新的API，允许合同评估一组帐户权限是否足以授权交易。这使我们可以通过部署新的WebAssembly来升级多重签名进程，而不需要使用硬分叉。</p><h2 id="简化合约开发"><a href="#简化合约开发" class="headerlink" title="简化合约开发"></a>简化合约开发</h2><p>EOSIO的目标之一就是尽可能简化合约开发。如果开发者知道如何使用方法（Method）编写C++类，那么他们应该能够编写一个尽可能不复杂的智能合约。</p><p>我们很高兴将我们的<code>hello world</code>合同简化为几行简单的代码，我们的工具链已自动生成了合约的ABI并将用户操作映射给您类上定义的方法。开发一个智能合约从未如此简单。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eosiolib/eosio.hpp&gt;</span>    </span></span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eosiolib/print.hpp&gt;</span>    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> eosio;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hello</span>:<span class="keyword">public</span> contract &#123;    </span><br><span class="line"></span><br><span class="line">    ​<span class="keyword">using</span> contract::contract;    </span><br><span class="line"></span><br><span class="line">    ​<span class="function"><span class="type">void</span> <span class="title">hi</span><span class="params">(name user)</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    ​    ​<span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span>, user);    </span><br><span class="line"></span><br><span class="line">    ​&#125;    </span><br><span class="line"></span><br><span class="line">&#125;;   </span><br><span class="line"></span><br><span class="line"><span class="built_in">EOSIO_ABI</span>(hello, (hi))    </span><br></pre></td></tr></table></figure><h2 id="浮点支持"><a href="#浮点支持" class="headerlink" title="浮点支持"></a>浮点支持</h2><p>简化智能合约开发的一部分是使开发者所需的数学算法的实现变得更加容易。区块链开发最困难的一个点就是缺乏浮点数学和相关的能力，比如求根和三角函数。许多算法（如Bancor）在浮点数上实现起来要容易得多，而不是强迫所有计算进入容易出错和内存密集的定点数计算。</p><p>我们通过WebAssembly集成一个软件浮点库，来避免硬件浮点的非确定性性质。有了软件浮点库，我们就可以获得确定性和开发简便性的好处，而且复杂情况下的成本不会高于定点数计算。在许多情况下，定点数计算比确定性浮点表示要么更容易出错，要么更耗费内存。</p><h2 id="C-标准模板库支持"><a href="#C-标准模板库支持" class="headerlink" title="C++标准模板库支持"></a>C++标准模板库支持</h2><p>对于EOSIO Dawn 3.0，我们付出了巨大的努力来增加对大多数C++标准模板库的支持。这意味着开发人员可以使用他们熟悉的工具、库和算法，同时避免由于这些算法的非标准实现所导致的潜在报错。</p><h2 id="定时交易"><a href="#定时交易" class="headerlink" title="定时交易"></a>定时交易</h2><p>对于定时交易的开发者，现在可以编写永久运营的合约了 - 只要合约具有足够的权限带宽。其他平台需要脱链解决方案才能在适当的时间唤醒合约。通过定时交易，我们可以提高效率和易用性，而无需开发人员托管自己的服务器以保持合约运行。</p><h2 id="自动范围检测"><a href="#自动范围检测" class="headerlink" title="自动范围检测"></a>自动范围检测</h2><p>在EOSIO Dawn 2.0下，每个交易都需要声明它将访问的数据范围。这对开发人员来说很容易出错，也造成逻辑的冗余。在Dawn 3.0下，区块生产者负责确定访问哪些数据范围并解除冲突。这使得所有交易更小，并将调度开销移动到区块生产者，而不是将其推回给用户、开发者或完整节点上。</p><h2 id="多重数据库API"><a href="#多重数据库API" class="headerlink" title="多重数据库API"></a>多重数据库API</h2><p>EOSIO Dawn 3.0引入了一个反射自<code>boost::multi_index_container</code>的新数据库API。此API支持按多个键排序的数据库表、查找记录、使用下限&#x2F;上限以及在数据库上前后翻页。这个新的API使用迭代器接口，可显著提高扫描表的性能。</p><p>现在也可以在64位、128位、256位和512位整数以及64位浮点数（双精度）上使用索引。在发布EOSIO 1.0之前，将会添加对字符串索引的支持。这是灵活性和开发简便性的显著改进，这意味着现在可以在同一张表上拥有几乎无限数量的索引字段。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>我们的团队一直密切关注着EOSIO在真实世界的表现，并对目前的结果非常满意。我们通过几种不同的配置对我们的软件进行了基准测试，以了解后续优化时性能的上限和下限。所有这些测试都假设代币传输在计算复杂度方面与比特币或Ethereum ERC20相当。</p><h3 id="最差情况-1000TPS"><a href="#最差情况-1000TPS" class="headerlink" title="最差情况 - 1000TPS"></a>最差情况 - 1000TPS</h3><p>这是我们的基准性能，没有任何优化，使用运行具有单线程签名验证解释器的多节点网络就足以支持超过1000 TPS。</p><h3 id="平均案例-3000TPS"><a href="#平均案例-3000TPS" class="headerlink" title="平均案例 - 3000TPS"></a>平均案例 - 3000TPS</h3><p>打开JIT编译器后，使用运行具有单线程签名验证解释器的多节点网络来维持3000TPS。</p><h3 id="最佳案例-6000TPS"><a href="#最佳案例-6000TPS" class="headerlink" title="最佳案例 - 6000TPS"></a>最佳案例 - 6000TPS</h3><p>一旦实现了签名验证的并行化，由于并行化和签名数量的增加，我们可以假设挂壁时钟的每次签名延迟将接近0。现在可以通过禁用签名验证来模拟此环境，在这个假设下，我们可以用JIT编译器在多节点网络上达到6000 TPS。</p><h3 id="理论案例-8000TPS"><a href="#理论案例-8000TPS" class="headerlink" title="理论案例 - 8000TPS"></a>理论案例 - 8000TPS</h3><p>如果我们从等式中删除网络代码，并只关注CPU在关闭签名验证和使用JIT编译器时能够执行的操作，那么我们可以达到每秒8000个单线程交易。要在单一区块链上获得更高的TPS，需要实现WebAssembly的并行化执行和更高级的调度程序。同样的场景，使用标准解释器而不是JIT，将得到2700TPS。这表明启用JIT编译器这个相对简单的改变将使我们的交易性能提高约3倍。测试是在MacBook 2.8Ghz i7上进行的。</p><h2 id="每秒无限次交易"><a href="#每秒无限次交易" class="headerlink" title="每秒无限次交易"></a>每秒无限次交易</h2><p>TPS的定义就好比橙子比较苹果。通过跨链通信，我们可以根据需要在区块链之间分配工作量。代币可以可靠而安全地在不同的区块链之间传输。由于相同（或不同）的区块生产者并行化的运行1000条区块链，我们可以看到每秒数百万级别的交易。这正是其他区块链提出的理论扩展方案的实际实现。</p><p>我们强烈鼓励基于EOSIO的公共网络的区块生产商根据需要运行尽可能多的区块链以满足用户需求。所有区块链都可以使用相同的代币作为权益和资源分配的基础。这将围绕单个代币创建最大可能的网络效应，并利用高市值资本化代币形成经济激励的信任和安全性。</p><p>像交易所、货币和社交媒体这样的应用程序可以在许多并行链上平衡其负载。</p><h2 id="未来之路"><a href="#未来之路" class="headerlink" title="未来之路"></a>未来之路</h2><p>EOSIO Dawn 3.0的重点在于核心平台的稳定性。在接下来的一个月中，我们将准备最终的系统合约，以实施所有权益、投票和治理机制，我们也将最终确定我们的代币标准。</p><p>一旦系统合约成熟到让我们满意，我们将启动一个新的公共测试网络。在此之前，我们会大大简化搭建测试网络和开发应用程序的流程。在接下来的几周内，我们会关闭当前的公共测试网络，同时我们将准备新的测试网络以最大限度地减少开发人员的困惑。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EOSIO Dawn 3.0是一个开发者版本，旨在通过稳定的API来实现「功能完备」。我们认为该平台现在已经足够稳定，可供认真的应用程序开发者开始构建应用程序。EOSIO已经变得比我们一年前所想象的更加强大和易用。</p><p>我们的团队正在以创纪录的速度飞速成长。我们的代码库在过去的一个月内一直是Github十大最活跃的C ++代码库之一。为了EOSIO 1.0在六月份发布高质量的公开版本，一切都在稳步推进！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天下午，BM在Medium宣布EOSIO Dawn 3.0正式发布，以下是2shou新鲜翻译的中文版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文共6515字，阅读约需20分钟&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://guoze.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="EOS" scheme="http://guoze.me/tags/EOS/"/>
    
  </entry>
  
  <entry>
    <title>老刘法则</title>
    <link href="http://guoze.me/liubang-rule.html"/>
    <id>http://guoze.me/liubang-rule.html</id>
    <published>2018-04-04T00:31:52.000Z</published>
    <updated>2019-09-25T09:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>毕业前曾经在一家500强的石油企业实习过，最终的实习汇报环节，面对一群外资经理，我厚着脸皮用东南亚口音的英语讲完了胶片，熬到了提问环节。<br>问题一个接着一个，以为该谢幕了的时候，全程黑着脸的全球人力总经理，突然抛出了一个开放性的问题：</p><blockquote><p>Who is your role model?</p></blockquote><p>我的大脑飞速转动，浮起了一个人的名字。</p><p>在他那个年代，49岁是人们的平均寿命。此人47岁之前一直在混日子，是绝对标准的混混、啃老族、臭流氓。47岁被逼开始创业，按照当时的平均寿命，说白了没两年好活的了。干的还是最难的事业 — 造反，刚开始创业也不顺利，被人追着屁股打，老婆、孩子、老爹都差点保不住。后来一朝成功，54岁那年被写进了历史课本。</p><p>老刘，不容易。</p><span id="more"></span><p>我试图用蹩脚的英语给老外们解释刘邦这一生的波澜起伏，He……His struggle……His team……His tiger wife，居然也逗得他们哈哈大笑。</p><p>自从念研究生开始，随身的书包里总要放着薄薄的几页纸 — 打印版的高祖本纪，每当自觉艰难困顿的时候，就拿出来翻来覆去再读一遍，往往能让我释怀。</p><p>一万字出头的文字，至少读过不下百遍。</p><p>老刘是个很矛盾的人。</p><p>击筑高歌<em>「大风起兮云飞扬，威加海内兮归故乡，安得猛士兮守四方」</em>是他，<em>「无所不狎侮，好酒及色」</em>也是他；面对白蛇挡路<em>「壮士行，何畏！」</em>是他；彭城被围气急败坏<em>「常蹶两儿欲弃之」</em>也是他；总结经验时谈到张良、萧何、韩信「此三者，皆人杰也，吾能用之，此吾所以取天下也」是他，老爹被活捉后面不改色和项羽笑道<em>「吾翁即若翁，必欲烹而翁，幸分我一杯羹」</em>也是他；追韩信那个痴心汉<em>「拜之，择良日，斋戒，设坛场，具礼」</em>是他，甩韩信那个负心人<em>「用张良计，召齐王信，袭夺齐王军」</em>也是他。</p><p>千变万化，莫名其妙。</p><p>总结不变的点？还真有，我称之为老刘法则，简直是居家旅行成事惠人之必备良品。</p><p>第一条是<strong>极致的现实主义</strong>。寻常人总是会被世俗法则所限制住，比如高富帅项羽，眼睛里揉不得沙子，一言不合就开打，反正除了韩信也真没有打得过他的人。而老刘不是，一切有利于最终目标的，都可以商量，该团结团结，该贿赂贿赂。火烧眉毛之际韩信来谈条件，要封假王，依旧是笑嘻嘻：大丈夫要当就当真王，给你。只因离不开这位军神，同样的道理，扔自己的儿女下车，也是为了能在乱世求生存求发展。</p><p>第二条是<strong>坚定而远大的目标</strong>。少时游览美术馆，看到一副对联至今让我印象深刻：<em>做现实主义者，行不可能之事</em>。老刘这是把这点发扬到极致的人。说老刘有理想那是高看了他，老刘出身平民，要不是靠一点封建迷信的小把戏还真不一定有人愿意跟他混。但老刘确实是一个目标感极强的人，秦建立了中国历史上第一个集权国家，而项羽又企图让它回归分封或者说分裂。老刘的目标就极为坚定，可以说他的创业史就是围绕着<strong>统一</strong>两个字，直到死之前还是在打仗，在谋求统一。好一个好酒好色的老刘，声色犬马没有消磨他的斗志，壮丽的未央宫没有困住他的脚步，美妾戚夫人少子刘如意没有动摇他的目标，战秦战章邯战项羽战匈奴战臧荼战陈豨战彭越战黥布，一个个对手倒在他的面前。他对得起47岁的誓言：天下苦秦久矣，我要给天下一个新的开始。</p><p>第三条是<strong>正确对待旁人意见</strong>。郦食其劝攻陈留、陈恢劝降宛城、韩信劝引兵东乡、袁生劝掠河北，似乎每一步都有谋士指引了惟一正确的方向。然而这是偶然吗？我觉得不是。恰恰是老刘能屡屡采纳正确的意见，才能拢聚这么些聪明脑袋。比如刚打进咸阳就有谋士进言，让把秦王杀了吧，老刘摆摆手：怀王让我来关中，就是看中我宽厚的个性，而且人家都投降了，多不吉利！我们的老刘是有主见的，从谋士们纷纷扰扰的意见中确定战略的方向，本来就比分析形势、出谋划策、巧言善辩要难得多得多。</p><p>36岁那年，老刘被抓去咸阳服徭役，看到秦始皇出行仪仗，长叹一句，嗟乎，大丈夫当如是！</p><p>后来就真的当如是了。</p><p>可是，更让我服气的是，61岁那年，刘邦听到黥布造反，本来是不想亲自出马的，可是老婆哭哭啼啼，<em>「上虽苦，为妻子自强！」</em>，我知道你不容易，但是为了老婆孩子，你还是要努力啊亲！于是老刘跨上马背又出发了，穿上那件不知浸过多少敌人鲜血的铠甲，提起那把不知砍过多少敌人脑袋的宝剑，心中犹有猛虎，眼中犹有凶光。</p><p>我只能，向着这位夕阳武士的背影，致敬。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;毕业前曾经在一家500强的石油企业实习过，最终的实习汇报环节，面对一群外资经理，我厚着脸皮用东南亚口音的英语讲完了胶片，熬到了提问环节。&lt;br&gt;问题一个接着一个，以为该谢幕了的时候，全程黑着脸的全球人力总经理，突然抛出了一个开放性的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Who is your role model?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的大脑飞速转动，浮起了一个人的名字。&lt;/p&gt;
&lt;p&gt;在他那个年代，49岁是人们的平均寿命。此人47岁之前一直在混日子，是绝对标准的混混、啃老族、臭流氓。47岁被逼开始创业，按照当时的平均寿命，说白了没两年好活的了。干的还是最难的事业 — 造反，刚开始创业也不顺利，被人追着屁股打，老婆、孩子、老爹都差点保不住。后来一朝成功，54岁那年被写进了历史课本。&lt;/p&gt;
&lt;p&gt;老刘，不容易。&lt;/p&gt;</summary>
    
    
    
    <category term="读而思" scheme="http://guoze.me/categories/reading/"/>
    
    
    <category term="刘邦" scheme="http://guoze.me/tags/%E5%88%98%E9%82%A6/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟程序员的超神之路 -- 面试成功之道</title>
    <link href="http://guoze.me/programmer-interview-tips.html"/>
    <id>http://guoze.me/programmer-interview-tips.html</id>
    <published>2018-04-02T12:57:47.000Z</published>
    <updated>2023-01-02T03:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一年前我写过<a href="https://mp.weixin.qq.com/s/-oG6qh96dZx0usGnWrq_Bw">菜鸟程序员的超神之路 – 从校园到职场</a>，承蒙不弃也从知乎骗了将近300赞，拖更一年姗姗来迟带来了超神系列的第二篇，算是补个前传。</p></blockquote><p>近几年在鹅厂也算面试过不下100名的初级与中级程序员了，虽然他们背景不同性格迥异，甚至连面试岗位的要求也有差别，然而，成功通过者就没有共同点了吗？当然有，我总结为以下四点：<strong>对工作经历的充分掌控、对对知识的灵活理解、对问题的主动推进、对挑战的好奇进取</strong>。</p><p>以下分点举例说明。</p><span id="more"></span><h1 id="对工作经历的充分掌控"><a href="#对工作经历的充分掌控" class="headerlink" title="对工作经历的充分掌控"></a>对工作经历的充分掌控</h1><blockquote><p>小H是我的一名前同事兼好友，现在在某家云主机厂商负责业务安全策略，工作之中用到了大数据分析，但模型以入门级别为主（例如逻辑回归）；小H一直希望脱离「策略」的范畴迈向「算法」的世界，但是一直觉得现在的工作经历过分偏重业务而非算法，出去面试心底有点发虚。当我和小H聊到他们近期做的一个入侵检测业务，我说这就是一个典型的RNN（递归神经网络）和LSTM（长短期记忆模型、RNN的变种）的落地场景，为什么不去试试呢？</p></blockquote><p>对工作经历的掌控能力好的面试者，首先散发着由内而外的自信心。这种自信心并不是无根之木（也面试过对互联网数研岗位缺乏认识却自信爆棚的跨行业求职者，无一例外悲剧），它来源于：</p><ol><li><strong>能够清晰定义问题</strong>。比如讲明白文本相似度模型是用来解决话题聚合不收敛的问题，而不是一上场就balabala算法有多酷炫。</li><li><strong>能够独立思考路径</strong>。比如引入条件随机场是因为它有助于词与词之间的前后关系映射，而不是微博大V刘知远说过这是最好的方法。</li><li><strong>能够明确问题瓶颈</strong>。比如SVM（支持向量机）面对大规模数据集的训练效率问题会是瓶颈，能提到这点两眼放光就基本上没问题了，再想到与MapReduce的结合更是加分项。</li><li><strong>能够尝试潜在路径</strong>。刚才小H就显然是个反面案例，哪怕神经网络并不在当前场景下最优，起码对前沿的方法的积极应用会让面试官给你的探索精神打个高分。<strong>没有low的业务，只有low的方法论和执行力</strong>。</li></ol><h1 id="对知识的灵活理解"><a href="#对知识的灵活理解" class="headerlink" title="对知识的灵活理解"></a>对知识的灵活理解</h1><blockquote><p>小U算是在校学生当中机器学习知识较为扎实的那种了，无论是传统的机器学习还是新潮的深度学习，各种概念都是手到擒来。直到我问了一个看似简单的送命题：ROC和AUC分别是什么意思？趁着他再一次精准无误的命中答案，我又抛出了第二个问题，ROC和AUC相对于其他指标有什么区别？这时我能感觉到轻微的卡壳，那么我又抛出第三个问题，既然有准确率、召回率、F1 Score等指标描述一个模型的好坏，为什么还需要ROC或AUC？这时我开始发现小U开始顾左右而言他了。</p></blockquote><p>工作和学习之间最明显的区别就是，<strong>单纯掌握知识并不形成生产力，知识只有与实践结合才能有所用处</strong>。对知识的灵活理解，意味着当你面对一个具体的问题，你能自发与那些飘在天际的理论相互印证，然后大呼一声，哦，原来如此！所以在面试的准备环节，各个知识点最好都能通过实践印证一遍，哪怕只是一个很小的场景，关键是将知识与实践打通。</p><h1 id="对问题的主动推进"><a href="#对问题的主动推进" class="headerlink" title="对问题的主动推进"></a>对问题的主动推进</h1><p>算法工程师这个岗位的特殊之处就在于，既不像埋首于论文堆的研究员也不像流连于代码架构的开发工程师，相比之下更加强调将前沿算法与业务场景灵活结合的能力。</p><blockquote><p>小G是极少的让我给出S评价的面试者。让我印象尤为深刻的是，小G作为某大厂一个入职不到两个月的新人实习生，负责一个通用分类组件的构建，实际承担的也是执行而非主导的角色，但却对该组件的业务需求和应用痛点了若指掌，甚至对每一痛点对应的算法优化方向也都提出了自己的见解。</p></blockquote><p>当我问小G为什么能在这么短的时间内积累到这么深入的业务认识，小G的回答是这样的：<strong>如果只是闷头优化算法而对业务需求不管不顾，那么哪怕算法做得再精美绝伦也不会产生任何的业务价值</strong>。所以他会利用一切正式和不正式的沟通机会去了解业务方的痛点，真正做到<strong>以终为始</strong>（参见<em>高效能人士的七个习惯</em>），结合业务需求给出算法优化方向的建议（<em>注意，是建议而已</em>）。</p><p><strong>对问题的主动推进能力一直是我最为关注的软技能</strong>。优秀的团队总是那些每个人都有可能成为发动机的团队，我真心盼望能多招几个发动机。</p><h1 id="对挑战的好奇进取"><a href="#对挑战的好奇进取" class="headerlink" title="对挑战的好奇进取"></a>对挑战的好奇进取</h1><blockquote><p>X是三年前面试过的一位社招候选人，当时给的无论算法能力还是开发能力评价都是优秀，但是最后我却加了一个问号。这个问号来自于当我问他是否有什么问题要问我时，X表示没有问题。当我不厌其烦给他介绍我们团队的业务范围以及待解决问题之后，我发现X也没有任何的兴奋感，只有一些客套的应对。</p><p>Y是同一时间面试的毕业生，由于我的惯例是会给面试者抛出一道海量数据排序的题目，要求直接在白纸上裸写代码。Y由于编程经验严重不足，这个环节显然难以完成，但是Y没有畏难情绪，通过提问和思考把问题一步步抽丝剥茧，最终在白纸上画出了解决问题的流程图。</p></blockquote><p>最终我们给X和Y同时发了offer，结局却有所不同：Y持续超出我们的预期，并取得了最高的考核绩效；X因为试用期表现低于预期只能让他遗憾离开了团队。这其实是三年以上工作经验候选人的普遍通病，就是<strong>容易被重复的工作磨平了好奇心和进取心，甘于去做一颗做普通的螺丝钉</strong>。而这种好奇与进取恰恰就是在职场能持续进步的根源，而反映到面试之中，就是：</p><ul><li>Tips A: <strong>如果你真的对一个岗位感兴趣，你就该通过一切渠道去了解公司、团队以及团队里的每个成员</strong></li><li>Tips B: <strong>面试不等同于考试，遇到挑战不要站在问题的角度，而是应该站在你的角度，想你有什么方法和资源去解决问题</strong></li></ul><p>外界许多教新手程序员面试的攻略总是聚焦于基础和技能，但我想能从优秀的人之上再脱颖而出的，是一个人发自内心的爆发力，是一个人对待万事万物的方法论。希望以上的<strong>面试之道</strong>，能对你们有所启发。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一年前我写过&lt;a href=&quot;https://mp.weixin.qq.com/s/-oG6qh96dZx0usGnWrq_Bw&quot;&gt;菜鸟程序员的超神之路 – 从校园到职场&lt;/a&gt;，承蒙不弃也从知乎骗了将近300赞，拖更一年姗姗来迟带来了超神系列的第二篇，算是补个前传。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近几年在鹅厂也算面试过不下100名的初级与中级程序员了，虽然他们背景不同性格迥异，甚至连面试岗位的要求也有差别，然而，成功通过者就没有共同点了吗？当然有，我总结为以下四点：&lt;strong&gt;对工作经历的充分掌控、对对知识的灵活理解、对问题的主动推进、对挑战的好奇进取&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下分点举例说明。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
    <category term="程序员" scheme="http://guoze.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="面试" scheme="http://guoze.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>程序员如何才能月入七万？</title>
    <link href="http://guoze.me/programmer-be-rich.html"/>
    <id>http://guoze.me/programmer-be-rich.html</id>
    <published>2018-03-24T09:00:40.000Z</published>
    <updated>2019-09-25T09:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>近日公布的「北京市引进人才管理办法」其中有一条：</p><blockquote><p>在本市行政区域内的高新技术企业、创新型总部企业、新型研发机构等科技创新主体中承担重要工作，近3年每年应税收入超过上一年度全市职工平均工资一定倍数的（企业注册在城六区和北京经济技术开发区的8倍，注册在本市其他区域的6倍），符合人才引进计划。</p></blockquote><p>根据北京市前一季度的职工平均工资，也就是程序员年税前收入大约八十万、月税前收入达到大约七万，就可以取得在北京的落户资格。</p><p>其实从我有限的职业阅历出发，月入七万对一个程序员来说还真不是一个遥不可及的Mission Impossible，甚至规划得当，就是工作五到十年可以达成的小目标。通向月入七万的路径有三条，就以身边人的小故事来开启吧。</p><span id="more"></span><h1 id="路径一：以技术深度建立超强壁垒"><a href="#路径一：以技术深度建立超强壁垒" class="headerlink" title="路径一：以技术深度建立超强壁垒"></a>路径一：以技术深度建立超强壁垒</h1><p>两年前与一位也是搞机器学习的工程师（以下简称H）合租过，H之前拿到A厂某高P职位，目前折算的月收入估计至少是北京落户线的五倍了。H的经历非常具有代表性，硕士毕业即加入一家夕阳西下的国外大厂B，先做的是后台开发，工作五年之后年收入也就在三十万上下。这时H就开始主动寻求职业的变化，迈出的第一步就是<strong>到求职网站定位稀缺性最强薪酬最高的职位</strong>，这时机器学习开始落入H的视野，恰好B有个外派去<em>支援</em>西雅图某个算法团队的机会，H争取到了这个机会，充分利用了西雅图这段职业经历向机器学习的大牛们学习各种Data Trick，积累实战经验（当然也离不开私底下钻研算法原理的苦工），慢慢也可以接手算法调优的项目了。H出师之后，凭借海归大牛的背景跳槽到B厂担任一名技术leader，年收入转眼翻番再翻番，也是这段时间与我有了交集。</p><p>与我合租的这段时间，我能明显感觉到H与平时接触到的技术leader不太一样：他不会花费很多时间埋头业务，也没有受周围加班文化的影响，每天七八点就下班回家，也很少看到他有什么社会活动。就是到家了也不闲着，要么是看各种业界顶尖的论文、要么是学习最新的深度学习框架、要么是到Kaggle上参加各类竞赛，H是我碰到的极少的工作十年仍然对前沿技术保持旺盛热情并且身体力行的人。</p><p>总结H的月入七万经验，关键在于三点：</p><ol><li><strong>充分抓住了稀缺性的价值</strong>。机器学习作为一个对数学与计算机要求都极高的领域，本来就很少人能真正深入进去；而到海量数据的大厂参与机器学习的核心项目，更为后面跳槽形成了一个极具稀缺性的背书。</li><li><strong>充分利用了大平台的资源</strong>。如果贸然想去外部找机器学习相关的职位，经历的匮乏会限制难以找到理想的条件，但如果是内部转岗从边缘职位做起，就有机会到核心项目去做机器学习的工作。</li><li><strong>始终坚持了技术型的路线</strong>。大部分技术人一旦迈上管理岗位之后就会放弃对技术的钻研，醉心于业务视野的扩展和管理能力的培养。但H始终都在学习和实践最前沿的技术，这让他对技术的趋势保持敏感，而且也刚好赶上了人工智能的热潮，顺利实现了收入的翻番再翻番。</li></ol><h1 id="路径二：加入一艘火箭"><a href="#路径二：加入一艘火箭" class="headerlink" title="路径二：加入一艘火箭"></a>路径二：加入一艘火箭</h1><p>L是我研究生时代的挚友。L刚毕业时漂泊无定，发展前景比许多同学都要渺茫；后来听说跳到了一家小公司做开发，当时这家小公司的名号我们都叫不出来，现在却路人皆知。作为早期技术骨干的L，工作第三年年收入就突破了六位数，员工福利也不可谓不惊人，成了同学圈之中的小赢家。但是无论任何时间约他吃饭，总是匆匆忙忙来匆匆忙忙走，据说长期是两点下班，没办法，谁让L加入了一艘火箭呢？不奋力向前，就得让火箭抛下。</p><p>总结L的月入七万经验，关键在于三点：</p><ol><li><strong>眼光好、胆识高、运气好</strong>。能够在早期就加入火箭的人，身上至少得有一点。</li><li><strong>能吃苦</strong>。收入永远是对战功的回报，尤其是小团队，越拼搏回报越大。</li><li><strong>纯粹做好技术</strong>。L的公司以人事斗争复杂闻名，离职率和员工福利一般惊人，L却待了五年，问他原因，回答就是<em>不想别的，只想做好技术</em>。</li></ol><h1 id="路径三：沿着大平台的职业路径往上爬"><a href="#路径三：沿着大平台的职业路径往上爬" class="headerlink" title="路径三：沿着大平台的职业路径往上爬"></a>路径三：沿着大平台的职业路径往上爬</h1><p>这是最平平无奇的路径，却是大多数程序员实现月入七万的最佳路径。K是我的高中同学，一毕业就加入BAT之一工作至今，各方面都不惊不乍：按时晋升、考核随大流、业务线一般，像极K的个性，那种聚会时寡言少语的群众演员。饭局间无意问起，K已经开始带团队了，收入也触摸到了北京落户线。</p><p>总结K的月入七万经验，关键在于三点：</p><ol><li><strong>选对平台</strong>。<em>职业早期加入一家巨头始终是不会错的选择</em>。大公司舞台更大，只要乖乖沿着设定的路径走，个人能力和财务回报都会稳步提升。</li><li><strong>转型管理</strong>。工作到了一定年限、技术到了一定级别之后转型做管理，等于是放大了你的能力，而公司一般对于承担管理职责的人也会有额外的奖励。</li><li><strong>抵制诱惑</strong>。大公司的工程师不乏猎头的骚扰，过往的互联网创业浪潮拐走了太多「迷途的羊羔」，然而一个人要想靠工作月入七万，Package肯定有一部分来自于股票，而要明白，股票永远是对于你稳定性的奖励。</li></ol><p>还有其他剑走偏锋月入七万的（<em>炒房、炒股、炒币……</em>）暂且按下不表。</p><p>其实从真实难易程度而言：2 &gt; 1 &gt; 3，但是赌性还是让我们始终想去加入一艘火箭，并且主动去传颂火箭人的传奇故事。</p><p>真心期待各位早日到达小目标。:~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近日公布的「北京市引进人才管理办法」其中有一条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在本市行政区域内的高新技术企业、创新型总部企业、新型研发机构等科技创新主体中承担重要工作，近3年每年应税收入超过上一年度全市职工平均工资一定倍数的（企业注册在城六区和北京经济技术开发区的8倍，注册在本市其他区域的6倍），符合人才引进计划。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据北京市前一季度的职工平均工资，也就是程序员年税前收入大约八十万、月税前收入达到大约七万，就可以取得在北京的落户资格。&lt;/p&gt;
&lt;p&gt;其实从我有限的职业阅历出发，月入七万对一个程序员来说还真不是一个遥不可及的Mission Impossible，甚至规划得当，就是工作五到十年可以达成的小目标。通向月入七万的路径有三条，就以身边人的小故事来开启吧。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
    <category term="程序员" scheme="http://guoze.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>给程序员与产品经理的六个沟通锦囊</title>
    <link href="http://guoze.me/programmer-pm-comunication.html"/>
    <id>http://guoze.me/programmer-pm-comunication.html</id>
    <published>2018-03-21T15:26:08.000Z</published>
    <updated>2023-01-02T03:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>毕业6年，做过千万级后台的主程，也主持过亿级DAU推荐系统的架构设计，招过人带过人开过人，也曾以产品经理的角色参与过多个运营系统项目。深知程序员与产品经理的沟通始终是IT行业绕不过去的坎，不长的职业生涯里，见过程序员与产品经理沟通顺畅相得益彰双双升迁的正面案例，也见过更多的撕逼堵心相互拆台两败俱伤的反面案例。这两种职业本来不应该有如此水深火热的对立，甚至从技术转产品也好从产品转技术也好都可以找出成功的样板，那么症结在哪里？作为实现过角色转换的人，我觉得根本是二元思维的对立：<strong>程序员的游侠精神，产品经理的老板想象</strong>。那么两个如此迥异的物种如何沟通无间合作自如相亲相爱呢？以下就是我从各自角度出发的一点细微建议。</p><span id="more"></span><p>首先是给程序员的三个沟通锦囊：</p><h1 id="学习技术不应成为最重要的目标"><a href="#学习技术不应成为最重要的目标" class="headerlink" title="学习技术不应成为最重要的目标"></a>学习技术不应成为最重要的目标</h1><p>也许没有如同程序员一般自由的职业了，虽然经常被类比农民（<em>码农</em>），可真正下地干活时我们可以做到心无旁骛，带上降噪耳机循环一首不合时宜的摇滚，机械键盘奏鸣着敲下的，是你的奇思妙想，与天时与地利无关（甚至我还碰到过因为想写自己喜欢代码甘愿从leader自降为普通员工的程序员）。然而，有很多初出茅庐的程序员就会滑向另一个极端：<strong>认为追求技术的持续深入是工作中最为重要的目标</strong>，如此一来导致的坏结果就是，要是产品经理丢过来的需求没有技术含量，就不乐意接，就打心底抵制；要是产品经理插入的需求恰好要破坏这一亩三分地（代码架构）的美感，就像被要了老命似的。</p><p>公司不是学校。公司支付你的薪水，不是让你深造技术，而是希望你替老板解决问题。你的聪明才智，除了用来造一个酷炫的预测模型拟合出用户增长的趋势，除了用来搭一个华丽的网络框架支撑千百万并发的访问，自然还得用来跑一个寻常不过的活跃数据，写一个简陋不已的监控网页。因为，这些都是业务发展不可或缺的一环。而你还想学习最拉风的技术？那么请穷尽所有的业余时间，去阅读最顶尖的论文，去操练最前沿的工具，去模仿最鬼斧神工的代码。一旦回到工作场合，你的大脑应当无时不刻在思考，如何<strong>高效、准确、敏捷完成产品提出的需求</strong>，以挤出更多的时间<strong>去关注业务的全局变化、去思考新技术与既有业务的结合点、去提高其他成员的技术能力</strong>。如果能做到这一点，我相信你会迅速成为团队所倚重的技术骨干。</p><h1 id="刻意培养对外表达能力"><a href="#刻意培养对外表达能力" class="headerlink" title="刻意培养对外表达能力"></a>刻意培养对外表达能力</h1><p>程序员一直是羞于言语表达的，祖师爷Linus的格言早已铭记于心：<strong>Talk is cheap, show me the code</strong>。但是公司却是各种角色的集合，像老板、设计师、HR、外包测试乃至前台，彼此间的交流仍然要通过自然语言而不是机器语言实现。所以<strong>能够适时把肚子里的聪明才智秀出来、能够恰当把眼皮底的功劳业绩拿住了、能够随时把身边的工作伙伴愉悦了</strong>，自然而然会成为受欢迎的人。随着平台的扩大，表达也不局限于一对一的单挑沟通，向上汇报、规划脑图、总结邮件、技术指南、胶片与演讲，都是现代职业人不得不学的技艺。学会了它，<strong>你的影响力将成十倍成百倍的扩散</strong>。可惜的是，我曾经看到过不下十个编程功夫已入化境的程序员倒在了这一阵，由于天性内敛敏感，加上长时间对着机器，养成了拙于表达、怯于表达的人设，导致回报与产出完全不成比例。从毕业至今，我一直坚持着一个从前任CTO那里偷师来的习惯：<em>工作一两个小时起来走一圈，随意挑一位不忙的同事，和他聊上两三分钟</em>，了解他近期手头的项目，顺道也介绍自己的项目，许多意料之外的成果就产生在这种貌似不刻意的小连接之上。</p><h1 id="勇于挑战产品经理的边界"><a href="#勇于挑战产品经理的边界" class="headerlink" title="勇于挑战产品经理的边界"></a>勇于挑战产品经理的边界</h1><p>若干年前我曾写过一篇倍受欢迎的<a href="https://mp.weixin.qq.com/s/9TS6cg3AF5avwPYI3bRMng">理想的程序员</a>，讲到理想程序员比普通程序员突出的六个一点点，就有一点是<strong>Never Say No</strong>，这引发了很热烈的争辩，也有读者误解为全盘接受产品提出的需求，当然不是！我只是鼓励程序员尤其是新手程序员以开放的心态去面对需求，并不意味着合理的不合理的需求都要一昧接下。在我看来，除了表达能力之外，程序员最该培养的第二项技能就是产品思维。<strong>技术工作的本质，无非就是通过技术实现用户或客户的需求</strong>，产品经理恰好是承担了连接技术与商业的职责，如果连接器没发挥好，即便技术完美达成了，也是无用功。除了产品经理之外，<strong>整条互联网流水线上的所有角色尤其是负责实现需求的程序员，都应该是需求的把关者，都应该具备敏锐的产品意识</strong>。当然你一开始或许不具备Say No的能力，但是接到需求时不妨多想一想需求从何而来，它真实存在吗，你是用户怎么感受，你妈是用户又怎么感受。长此以往的死磕之后你的产品意识会越来越好，程序员懂产品，好比流氓会武术，并不是你一定要和AllenZhang一样转行去做产品经理，但至少你在产品经理心目中的话语权和专业度会涨好几个段位，需求也会越接越少，越接越精，腾出更多时间去建设你的技术影响力。</p><p>然后是给产品经理的三个沟通锦囊：</p><h1 id="产品经理不是经理"><a href="#产品经理不是经理" class="headerlink" title="产品经理不是经理"></a>产品经理不是经理</h1><p>记得毕业前问一位同学为什么选择产品经理这个职业，他打趣道因为这大概是惟一能给应届生提供的经理职位，许多人也许有类似的误解，觉得产品经理比程序员地位更高。一个产品经理尤其是新手产品经理，如果带着这么一种心态去与程序员沟通结果无疑是悲惨的。产品经理与程序员一样要从螺丝钉做起，无非一个的职责是写代码，另一个则是写需求。虽然产品经理有更多与老板对接的机会，但切记一定不能把自己代入为老板。请看某产品菜鸟A与程序员菜鸟B的失败沟通案例：</p><blockquote><p>A：现在有一个超级紧急的需求，X总说今晚就想上线，加个班兄弟？<br>B：@!#$%^&amp;*</p></blockquote><p>再来看产品大牛C与程序员菜鸟B的沟通就顺畅多了：</p><blockquote><p>C：我们最近看了数据，发现在左侧加个导航栏能增加10%的聊天功能活跃，和X总沟通过之后他觉得这个功能也挺重要的，上线这个功能之后今年的KPI也就有谱了，这个模块你最熟，能不能评估需要多久改完？虽然X总很着急，但是我们肯定要先保证质量，人力方面有困难的话我帮你去协调。<br>B：有理有据，无法拒绝。</p></blockquote><p>C与B的对话，虽然目的同样在于传递一种要求，但有更多的平等交流的味道，<strong>能让对方了解到更多的背景信息，让对方感觉是在为共同的目标工作，而不是把对方当成下达指令就能开动的机器</strong>。</p><h1 id="主动为程序员寻找资源"><a href="#主动为程序员寻找资源" class="headerlink" title="主动为程序员寻找资源"></a>主动为程序员寻找资源</h1><p>罗振宇曾经把产品经理比喻为一个连接器，这个连接器除了连接上文提到的技术与商业，还需要连接团队中的不同角色。通常产品经理所掌握的信息是最多的，但是许多产品经理并不知道信息必须要充分流动起来才能成为资源，比如哪里有现成的组件、谁做过类似的工作、哪个组可能有空缺的人力，这些信息都是有潜在价值的，一旦供应方的信息和需求方的信息匹配上，就会形成资源的优化配置。一个合格的产品经理，应该<strong>为程序员留心和协调资源的引入，帮助他们减轻工作负担、提高产出效率</strong>。而一个优秀的产品经理，还应该<strong>为程序员的职业发展路径考虑，帮助不善言辞的程序员向上请功，帮助醉心技术的程序员争取更多与大牛交流的机会，帮助堆砌业务的程序员挖掘更多的技术亮点</strong>。毕竟你帮助别人更多，别人自然也就更愿意回报你。产品经理与程序员，从来就是相依为命，「狼狈为奸」。</p><h1 id="做团队的最强大脑"><a href="#做团队的最强大脑" class="headerlink" title="做团队的最强大脑"></a>做团队的最强大脑</h1><p>产品经理这个职业相比程序员，最有趣的一点就是<strong>除了决定怎么做，还能决定做什么</strong>（<em>当然程序员这个职业太多更有趣的地方，容我卖个关子，以后专文写</em>）。所以，一个差劲的产品经理将成倍放大团队的人力耗费，降低团队的运作效率。有许多经验帖都谈到产品经理与程序员的矛盾症结在于<strong>改需求</strong>，其实改需求只是表象，互联网本来就是一个快速变化的行业，改需求不可避免，根源在于产品经理是否有独立思考的能力和意识，改需求是人云亦云，是老板Push，还是实践过后从观察数据洞悉人性得来的深刻启发，这里大不相同。因此产品经理除了要当团队的连接器之外，还得锻炼自己<strong>成为团队的大脑，不仅是大脑，而且还得是最强大脑</strong>。只有你把需求想踏实了，想细致了，想全面了，才有足够的底气去应对各方各面的挑战，让程序员们信服你，追随你，死心塌地为你改需求。</p><p>下次去找产品经理（程序员）对需求之前，不妨带上我的这三个沟通锦囊，真心期待你们能碰出新的火花，携手走向下一个职业巅峰。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;毕业6年，做过千万级后台的主程，也主持过亿级DAU推荐系统的架构设计，招过人带过人开过人，也曾以产品经理的角色参与过多个运营系统项目。深知程序员与产品经理的沟通始终是IT行业绕不过去的坎，不长的职业生涯里，见过程序员与产品经理沟通顺畅相得益彰双双升迁的正面案例，也见过更多的撕逼堵心相互拆台两败俱伤的反面案例。这两种职业本来不应该有如此水深火热的对立，甚至从技术转产品也好从产品转技术也好都可以找出成功的样板，那么症结在哪里？作为实现过角色转换的人，我觉得根本是二元思维的对立：&lt;strong&gt;程序员的游侠精神，产品经理的老板想象&lt;/strong&gt;。那么两个如此迥异的物种如何沟通无间合作自如相亲相爱呢？以下就是我从各自角度出发的一点细微建议。&lt;/p&gt;</summary>
    
    
    
    <category term="职业论" scheme="http://guoze.me/categories/career/"/>
    
    
    <category term="程序员" scheme="http://guoze.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="产品经理" scheme="http://guoze.me/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>区块链的乌托邦想象 -- 乌有国的微信、淘宝和百度</title>
    <link href="http://guoze.me/blockchain-bat.html"/>
    <id>http://guoze.me/blockchain-bat.html</id>
    <published>2018-03-18T14:20:57.000Z</published>
    <updated>2019-09-25T09:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自从写了<strong>为什么区块链的去中心是个伪命题</strong>之后，天天被知友批判，说不要谈币色变、谈链色变，要以积极的心态拥抱新技术，好吧，我明明就是区块链的红方（看多），于是就有了这篇YY文。</p></blockquote><p>假如某天你睁眼醒来，突然发现自己穿越到了20XX年的<strong>区块链乌有国</strong>，好吧，如果今年是区块链元年的话，那时就算区块链五十年。五十年的时间已经让区块链与互联网紧密融合到了一起，成为所有人类都必须接入的新一代基础设施。而旧时代的互联网巨头也纷纷完成了到区块链的转型，你所熟悉的微信、淘宝、百度，升级成了<strong>链信、链宝、链度</strong>。</p><p>也许你会好奇，它们与这个时代的超级应用有什么区别？</p><span id="more"></span><h1 id="链信：隐私保护-→-体验提升"><a href="#链信：隐私保护-→-体验提升" class="headerlink" title="链信：隐私保护 → 体验提升"></a>链信：隐私保护 → 体验提升</h1><p>构筑于区块链之上的社交工具，可以利用网络的去中心化和匿名性实现更好的隐私保护。也许有人会说隐私保护并不是吸引用户的核心卖点（<em>像国内类似Snapchat之类的应用从来就没火过</em>），但是更完备的隐私保护同样能带来显著的用户体验提升，举个例子，出于隐私保护的要求，微信的点对点聊天内容会在到达目标用户的客户端之后从服务器删除，这也意味着一旦我误删记录或者更换设备是没办法还原的。<strong>到了区块链乌有国，社交工具产生的所有数据，都可以依照公有协议的标准进行加密存储，而惟一的解密私钥就存储在我的设备钱包之中</strong>。用户一旦更换了新的设备，只要重新录入私钥到钱包，全部过往的聊天记录、公众号阅读历史、朋友圈发布图片、好友互动等等，都会在一瞬间从其他区块链节点加载到本机，并通过私钥解密恢复。</p><h1 id="链宝：多中心化-→-生态共建"><a href="#链宝：多中心化-→-生态共建" class="headerlink" title="链宝：多中心化 → 生态共建"></a>链宝：多中心化 → 生态共建</h1><p>当代互联网的一个核心缺陷在于，<strong>数据被禁锢在巨头的孤岛之中，反过来巨头也需要承担其能力之外的信用中介问题，比如假货</strong>。构筑于区块链之上的电商平台，可以将数据以统一格式提供给经过授权的第三方，将信用中介的责任分散给多个节点，比如工商局、消费者协会或者其他具备专业领域知识的组织。这样既打破了数据的垄断，也让更多节点有机会去参与电商生态的建设。到了区块链乌有国，像顺丰和菜鸟去年因为数据导致的纷争也会迎刃而解，<em>反正数据都在链上，只要彼此授权就能访问</em>。</p><p><strong>智能合约</strong>虽然还有不少实践上的缺陷，然而却是解决交易纠纷的最好方法，它能够边界清晰的定义每个角色的权利和责任，在交易纠纷发生之时提前约定好对应的处理方式。当然它不可能一开始就完美，但是一个经历各种被钻漏洞而不断更新迭代的智能合约，要比当前过度依赖人工干预的交易纠纷处理流程完美得多。<em>参见近期六六炮轰京东的事件</em>。</p><h1 id="链度：开放数据-→-人工智能"><a href="#链度：开放数据-→-人工智能" class="headerlink" title="链度：开放数据 → 人工智能"></a>链度：开放数据 → 人工智能</h1><p>搜索引擎通过收集用户的点击数据，关联网页与搜索词，给出搜索词对应的网页排名，最终通过点击广告盈利。这简直就是一个纯技术的印钞机流程。用户被白白拿走了浏览和点击数据，却还得忍受各种广告的强行插入，而平台方也要需要投入大量人力用于SEO反作弊以及排名算法的优化。这显然不是一种共赢的结果。<strong>到了区块链乌有国，所有数据的归属权都回到了个人手中</strong>。只有用户的私钥能授权自己数据的被使用，平台方要用就必须先付费，用户不想被使用也可以拒绝；除了授权使用数据，用户还可以通过浏览广告获得额外的收益；而开放的数据可以分阶段授权给可信的第三方组织，开放给更多聪明的工程师开发更严密的反作弊、更智能的排名算法、更广泛的场景落地。恰恰区块链就是由数字货币开始落地的，<strong>它完全有能力创造一个新的利益分配体系，让更多人（<em>或者机器人</em>）参与到数据的流动过程之中，这才是迎接人工智能时代的必要条件</strong>。</p><p><strong>以上内容纯属本人YY，如有雷同，纯属巧合。</strong></p><p>翻阅互联网的发展史，你就会发现区块链所倡导的去中心化，第一代互联网先驱早就写在他们的想象里，然而最终并没有被发生。我也会怀疑以上的种种幻想，对于巨头而言究竟有什么动力去推动，最终我给了自己一个答案，就是：<strong>真正的颠覆性创新往往发生在不为人知的边缘，不关乎巨头，就在你我之间</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;自从写了&lt;strong&gt;为什么区块链的去中心是个伪命题&lt;/strong&gt;之后，天天被知友批判，说不要谈币色变、谈链色变，要以积极的心态拥抱新技术，好吧，我明明就是区块链的红方（看多），于是就有了这篇YY文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如某天你睁眼醒来，突然发现自己穿越到了20XX年的&lt;strong&gt;区块链乌有国&lt;/strong&gt;，好吧，如果今年是区块链元年的话，那时就算区块链五十年。五十年的时间已经让区块链与互联网紧密融合到了一起，成为所有人类都必须接入的新一代基础设施。而旧时代的互联网巨头也纷纷完成了到区块链的转型，你所熟悉的微信、淘宝、百度，升级成了&lt;strong&gt;链信、链宝、链度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也许你会好奇，它们与这个时代的超级应用有什么区别？&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://guoze.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>致敬霍金，致敬每个懵懂少年的物理梦</title>
    <link href="http://guoze.me/to-hawking.html"/>
    <id>http://guoze.me/to-hawking.html</id>
    <published>2018-03-14T16:23:01.000Z</published>
    <updated>2019-10-15T05:29:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天霍老爷子走了，一位朋友在朋友圈发文纪念：<strong>霍金老爷子退休去其它星球度假去了</strong>。我调皮回复：<strong>向其他星球的原住民发出警告：小心来自地球的殖民者</strong>。内心却是百感交集。</p><span id="more"></span><p>以前高中最喜欢的学科就是物理。相较于数学的灵性，物理这种逻辑推演的学问更能让我如鱼得水。那时和其他几个学霸组了个俱乐部，不好好上课，成天给老师挑错，放学后就到观海平台大谈狭义相对论、量子力学和黑洞理论，还大言不惭的对他们传道：伟大物理学家最好的创造往往就诞生在他二十岁左右，我们得抓紧。现在回想，真是脸皮厚得可笑。</p><p>但是，难以想象物理对我们这群荷尔蒙过剩的少年，竟然有如同美丽的异性一般的魅力。</p><p>俱乐部里的另一位同学，爱物理比我爱得激进，高考填志愿时（我们是考前填）志愿表上只填了一行：<em>北大物理系</em>。考完他就卷好铺盖准备复读了，说至少准备抗战三年。最终他成了我们年级的传奇，压线进入了北大物理系，恐怕当时录取他的老师心中也带着不凡的感动。</p><p>前些日子再见，他已经是某美元基金的投资经理了。奔向油腻中年的路上，我们都忘了曾经懵懂的物理梦。</p><p>二十世纪的前半叶，那可真是理论物理的黄金时代。爱因斯坦、居里夫人、海森堡、狄拉克、波尔、费米、薛定谔、普朗克、费曼、波恩、泡利、朗道、奥本海默，当这些人类历史上最聪明的脑袋一起来穷究宇宙的本质，竞相追逐褶褶生辉的文明皇冠上的宝珠，多么美好的时代。谁料到这种盛景，不仅空前，而且绝后。</p><p><img src="/images/15210168496336.jpg"></p><p>二战之后的物理学进展坠落之快，出乎我们的意料，以至于登月的宇航员发出了这样的感慨：</p><blockquote><p>你承诺我们要殖民火星，却给了我们Facebook。</p></blockquote><p>在这个算法横行的时代，我们也活得越来越像一个算法：<strong>小流量试探 → 获取反馈 → 加大流量比例 → All In → 赢了会所嫩模 or 输了下海干活 → 清零重启</strong>。少问对错是非，没空刨根究底；不管黑猫白猫，随波逐流奔跑。</p><p>斯蒂芬·威廉·霍金，也许是人类历史上最后一个仰望星空的人。</p><p>但至少有个少年，曾经希望如他一般去仰望星空，也无比感谢这位行动不便的智者带给我们的朴素建议：</p><p><strong>无论何时何地，都要对这个世界的本质保持好奇</strong>。</p><p>致敬霍金，致敬少年。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天霍老爷子走了，一位朋友在朋友圈发文纪念：&lt;strong&gt;霍金老爷子退休去其它星球度假去了&lt;/strong&gt;。我调皮回复：&lt;strong&gt;向其他星球的原住民发出警告：小心来自地球的殖民者&lt;/strong&gt;。内心却是百感交集。&lt;/p&gt;</summary>
    
    
    
    <category term="梦中语" scheme="http://guoze.me/categories/thinking/"/>
    
    
    <category term="霍金" scheme="http://guoze.me/tags/%E9%9C%8D%E9%87%91/"/>
    
    <category term="物理学" scheme="http://guoze.me/tags/%E7%89%A9%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不看好一切基于区块链的信息流分发平台？</title>
    <link href="http://guoze.me/blockchain-feeds.html"/>
    <id>http://guoze.me/blockchain-feeds.html</id>
    <published>2018-03-13T16:17:02.000Z</published>
    <updated>2019-09-25T10:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15208296102753.png"></p><p>将区块链与信息流融合，是区块链试图改变<em>古典互联网</em>（此处要加引号）的典型场景之一，又以<em>区块链奇才</em>（此处又要加引号）ByteMaster创立的<strong>Steemit</strong>为代表（国内也有币乎等一系列跟随者。</p><p>首先科普下<strong>Steemit</strong>平台：</p><ul><li>发行<em>Steem</em>代币，其中10%用于奖励创作者</li><li>文章质量越高，收到的赞数越多，作者得到的奖励就越高</li><li>越早给优质文章点赞或留言来支持，也能获得额外的奖励</li><li><em>Steem</em>代币可以转换为<em>Steem Power</em>（可分红，共享每日产出<em>Steem</em>的90%）或<em>Steem Dollar</em>（与美元挂钩的债券）</li></ul><p>相对于<em>古典互联网</em>的信息流分发平台，它的核心立足点有三个：</p><ul><li>不经过信用中介，直接奖励创作者</li><li>平台通过分红获取收益，因此不需要投放广告</li><li>账号层面较强的作弊防御手段</li></ul><p>那么我的问题来了：<strong>区块链与信息流融合的模式，真的就有颠覆性么？</strong></p><span id="more"></span><p>有人说，<strong>这可是区块链、区块链、区块链啊！</strong>亲爱的，遇到区块链就无脑吹这真的好吗？</p><p>坦白说，<strong>除了代币获取与收益转化的部分，我真没有看到区块链对于Steemit运转逻辑的积极影响</strong>。</p><p>它面对的问题<em>古典互联网</em>的信息流平台都要面对，然而引入区块链，依然没有半点改观。</p><p>暂且从<strong>Steemit</strong>的反作弊规则出发：</p><blockquote><p>每个用户都有投反对票的权利（Down Vote），刷赞或没有营养的文章会被群起而攻之。</p><p>避免恶意投反对票：每个用户都有信誉值，信誉值随着用户行为累积；信誉低的人给信誉高的人投Down Vote无效。</p><p>利用Voting Power限制投票的速度。比如，每投一票赞成Voting Power将降低2%，每天Voting Power自动恢复20%。</p></blockquote><p>作为一名与恶意留言斗争了两年的资深反作弊工程师，我笑了：<strong>如果是放在国内，这种等级的反作弊策略只能相当于幼儿园水平</strong>，水军大概有一万种方式来突破用区块链构筑的防线。</p><p>其实<strong>智能合约</strong>也是面同样的困境，无法阻止合约以外的情况发生，而合约以外恰恰才是不法分子会钻空子的地方。</p><p>再谈谈不通过广告获取收益的可行性。</p><p><em>古典互联网</em>的信息流分发平台的商业逻辑可以用如下序列图说明：<strong>平台以广告费创造盈利预期从而获得投资人青睐，提高用户粘性（通过优质内容）有利于提高广告价格，优质内容又依赖于创作者</strong>。平台以自利性驱动着整个链条，这是典型的中心化场景。</p><div id="sequence-0"></div><p>而对应<strong>Steemit</strong>的商业逻辑同样可用如下序列图说明，可见<strong>Steemit得以运转的核心就在于数字货币，而非真实的商业利益</strong>。平台仅仅是数字货币的发行方，缺乏强烈的动机去驱动用户和创作者的规模增长，一旦数字货币的泡沫褪去，这套商业逻辑即将面临巨大的崩溃。</p><div id="sequence-1"></div><p>最后一个问题：<em>古典互联网</em>的信息流分发平台不直接奖励创作者真的是问题么？其实你想想下面这三位通过自媒体得到的财富回报就知道了，毕竟这是一个流量随时都可以变成钱的时代啊！</p><p><img src="/images/15209559742930.png"></p><p>再说了，直接奖励创作者和用户也并不是新鲜事，趣头条早就红红火火做起来了，变现规则之复杂足以让十个<strong>Steemit</strong>都汗颜。</p><p><img src="/images/1751520956162_.pic.jpg"></p><p>因此，基于区块链的信息流分发平台最核心的三个立足点都经不过推敲，<strong>它注定只是泡沫的一部分，而不是未来的一部分</strong>。</p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">平台->广告商: 增加曝光广告商->平台: 支付广告费创作者->平台: 创作内容平台->创作者: 扩大影响力用户->平台: 获取资讯同时浏览广告平台->用户: 鼓励优质内容投资人->平台: 得到商业回报平台->投资人: 展示盈利预期</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">平台->创作者: 发行数字货币创作者->平台: 创作内容并获取数字货币用户->平台: 获取资讯同时获取数字货币平台->用户: 发行数字货币投资人->平台: 通过数字货币得到商业回报平台->投资人: 发行数字货币</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/15208296102753.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;将区块链与信息流融合，是区块链试图改变&lt;em&gt;古典互联网&lt;/em&gt;（此处要加引号）的典型场景之一，又以&lt;em&gt;区块链奇才&lt;/em&gt;（此处又要加引号）ByteMaster创立的&lt;strong&gt;Steemit&lt;/strong&gt;为代表（国内也有币乎等一系列跟随者。&lt;/p&gt;
&lt;p&gt;首先科普下&lt;strong&gt;Steemit&lt;/strong&gt;平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发行&lt;em&gt;Steem&lt;/em&gt;代币，其中10%用于奖励创作者&lt;/li&gt;
&lt;li&gt;文章质量越高，收到的赞数越多，作者得到的奖励就越高&lt;/li&gt;
&lt;li&gt;越早给优质文章点赞或留言来支持，也能获得额外的奖励&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Steem&lt;/em&gt;代币可以转换为&lt;em&gt;Steem Power&lt;/em&gt;（可分红，共享每日产出&lt;em&gt;Steem&lt;/em&gt;的90%）或&lt;em&gt;Steem Dollar&lt;/em&gt;（与美元挂钩的债券）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对于&lt;em&gt;古典互联网&lt;/em&gt;的信息流分发平台，它的核心立足点有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不经过信用中介，直接奖励创作者&lt;/li&gt;
&lt;li&gt;平台通过分红获取收益，因此不需要投放广告&lt;/li&gt;
&lt;li&gt;账号层面较强的作弊防御手段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我的问题来了：&lt;strong&gt;区块链与信息流融合的模式，真的就有颠覆性么？&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://guoze.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="信息流" scheme="http://guoze.me/tags/%E4%BF%A1%E6%81%AF%E6%B5%81/"/>
    
    <category term="Steemit" scheme="http://guoze.me/tags/Steemit/"/>
    
  </entry>
  
</feed>
